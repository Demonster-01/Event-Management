{
    "sourceFile": "EventOrg/src/components/PlannerList.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 34,
            "patches": [
                {
                    "date": 1731945356785,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1731945822651,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,9 +45,9 @@\n         setLoading(false);\r\n       })\r\n       .catch((error) => {\r\n         setError(\"Error fetching planner data\");\r\n-        console.error(error);\r\n+        console.error(\"Error fetching planner data:\", error.response || error);\r\n         setLoading(false);\r\n       });\r\n   };\r\n \r\n@@ -60,53 +60,61 @@\n     };\r\n     setPlanners(storedPlanners);\r\n   };\r\n \r\n+  // Add item to planner\r\n   const addToPlanner = (item, type) => {\r\n-    let updatedPlanners = { ...planners };\r\n+    setPlanners((prevPlanners) => {\r\n+      const updatedPlanners = { ...prevPlanners };\r\n+      updatedPlanners[type].push(item);\r\n+      localStorage.setItem(\"plannerList\", JSON.stringify(updatedPlanners));\r\n+      return updatedPlanners;\r\n+    });\r\n \r\n-    // Dynamically add items based on the type\r\n-    if (type === \"venues\") {\r\n-      updatedPlanners.venues.push(item);\r\n-    } else if (type === \"services\") {\r\n-      updatedPlanners.services.push(item);\r\n-    } else if (type === \"packages\") {\r\n-      updatedPlanners.packages.push(item);\r\n-    }\r\n-\r\n-    setPlanners(updatedPlanners);\r\n-    localStorage.setItem(\"plannerList\", JSON.stringify(updatedPlanners));\r\n-\r\n     if (isAuthenticated) {\r\n       const token = localStorage.getItem(\"access_token\");\r\n-\r\n-      // Send only relevant ID based on type\r\n-      axios.post(\r\n-        \"http://127.0.0.1:8000/api/planner-list/\",\r\n-        {\r\n-          venue: type === \"venues\" ? item.id : null,\r\n-          service: type === \"services\" ? item.id : null,\r\n-          package: type === \"packages\" ? item.id : null,\r\n-        },\r\n-        { headers: { Authorization: `Bearer ${token}` } }\r\n-      );\r\n+      axios\r\n+        .post(\r\n+          \"http://127.0.0.1:8000/api/planner-list/\",\r\n+          {\r\n+            venue: type === \"venues\" ? item.id : null,\r\n+            service: type === \"services\" ? item.id : null,\r\n+            package: type === \"packages\" ? item.id : null,\r\n+          },\r\n+          { headers: { Authorization: `Bearer ${token}` } }\r\n+        )\r\n+        .catch((error) => {\r\n+          console.error(\r\n+            \"Error adding item to planner:\",\r\n+            error.response || error\r\n+          );\r\n+        });\r\n     }\r\n   };\r\n \r\n+  // Remove item from planner\r\n   const removeFromPlanner = (itemId, type) => {\r\n-    const updatedPlanners = { ...planners };\r\n-    updatedPlanners[type] = updatedPlanners[type].filter(\r\n-      (item) => item.id !== itemId\r\n-    );\r\n+    setPlanners((prevPlanners) => {\r\n+      const updatedPlanners = { ...prevPlanners };\r\n+      updatedPlanners[type] = updatedPlanners[type].filter(\r\n+        (item) => item.id !== itemId\r\n+      );\r\n+      localStorage.setItem(\"plannerList\", JSON.stringify(updatedPlanners));\r\n+      return updatedPlanners;\r\n+    });\r\n \r\n-    setPlanners(updatedPlanners);\r\n-    localStorage.setItem(\"plannerList\", JSON.stringify(updatedPlanners));\r\n-\r\n     if (isAuthenticated) {\r\n       const token = localStorage.getItem(\"access_token\");\r\n-      axios.delete(`http://127.0.0.1:8000/api/planner-list/${itemId}/`, {\r\n-        headers: { Authorization: `Bearer ${token}` },\r\n-      });\r\n+      axios\r\n+        .delete(`http://127.0.0.1:8000/api/planner-list/${itemId}/`, {\r\n+          headers: { Authorization: `Bearer ${token}` },\r\n+        })\r\n+        .catch((error) => {\r\n+          console.error(\r\n+            \"Error removing item from planner:\",\r\n+            error.response || error\r\n+          );\r\n+        });\r\n     }\r\n   };\r\n \r\n   const { venues, services, packages } = planners;\r\n@@ -131,17 +139,21 @@\n               <span className={styles.item_count}>({venues.length})</span>\r\n             </div>\r\n             {showVenues && (\r\n               <div className={styles.section_content}>\r\n-                {venues.map((venueItem) => (\r\n-                  <PlannerItemComponent\r\n-                    key={venueItem.id}\r\n-                    item={venueItem}\r\n-                    type=\"venues\"\r\n-                    onAdd={addToPlanner}\r\n-                    onRemove={removeFromPlanner}\r\n-                  />\r\n-                ))}\r\n+                {venues.length > 0 ? (\r\n+                  venues.map((venueItem) => (\r\n+                    <PlannerItemComponent\r\n+                      key={venueItem.id}\r\n+                      item={venueItem}\r\n+                      type=\"venues\"\r\n+                      onAdd={addToPlanner}\r\n+                      onRemove={removeFromPlanner}\r\n+                    />\r\n+                  ))\r\n+                ) : (\r\n+                  <p>No venues added yet.</p>\r\n+                )}\r\n               </div>\r\n             )}\r\n           </div>\r\n \r\n@@ -155,17 +167,21 @@\n               <span className={styles.item_count}>({services.length})</span>\r\n             </div>\r\n             {showServices && (\r\n               <div className={styles.section_content}>\r\n-                {services.map((serviceItem) => (\r\n-                  <PlannerItemComponent\r\n-                    key={serviceItem.id}\r\n-                    item={serviceItem}\r\n-                    type=\"services\"\r\n-                    onAdd={addToPlanner}\r\n-                    onRemove={removeFromPlanner}\r\n-                  />\r\n-                ))}\r\n+                {services.length > 0 ? (\r\n+                  services.map((serviceItem) => (\r\n+                    <PlannerItemComponent\r\n+                      key={serviceItem.id}\r\n+                      item={serviceItem}\r\n+                      type=\"services\"\r\n+                      onAdd={addToPlanner}\r\n+                      onRemove={removeFromPlanner}\r\n+                    />\r\n+                  ))\r\n+                ) : (\r\n+                  <p>No services added yet.</p>\r\n+                )}\r\n               </div>\r\n             )}\r\n           </div>\r\n \r\n@@ -179,17 +195,21 @@\n               <span className={styles.item_count}>({packages.length})</span>\r\n             </div>\r\n             {showPackages && (\r\n               <div className={styles.section_content}>\r\n-                {packages.map((packageItem) => (\r\n-                  <PlannerItemComponent\r\n-                    key={packageItem.id}\r\n-                    item={packageItem}\r\n-                    type=\"packages\"\r\n-                    onAdd={addToPlanner}\r\n-                    onRemove={removeFromPlanner}\r\n-                  />\r\n-                ))}\r\n+                {packages.length > 0 ? (\r\n+                  packages.map((packageItem) => (\r\n+                    <PlannerItemComponent\r\n+                      key={packageItem.id}\r\n+                      item={packageItem}\r\n+                      type=\"packages\"\r\n+                      onAdd={addToPlanner}\r\n+                      onRemove={removeFromPlanner}\r\n+                    />\r\n+                  ))\r\n+                ) : (\r\n+                  <p>No packages added yet.</p>\r\n+                )}\r\n               </div>\r\n             )}\r\n           </div>\r\n         </>\r\n"
                },
                {
                    "date": 1731945947300,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,36 +1,33 @@\n import React, { useEffect, useState } from \"react\";\r\n import axios from \"axios\";\r\n-import PlannerItemComponent from \"./PlannerItemComponent\"; // Import your PlannerItem component\r\n-import styles from \"../module_css/PlannerList.module.css\";\r\n+import jwt_decode from \"jwt-decode\";\r\n \r\n-export default function PlannerList() {\r\n+const PlannerList = () => {\r\n+  const [loading, setLoading] = useState(true);\r\n   const [planners, setPlanners] = useState({\r\n     venues: [],\r\n     services: [],\r\n     packages: [],\r\n   });\r\n-  const [loading, setLoading] = useState(false);\r\n   const [error, setError] = useState(null);\r\n-  const [showVenues, setShowVenues] = useState(false);\r\n-  const [showServices, setShowServices] = useState(false);\r\n-  const [showPackages, setShowPackages] = useState(false);\r\n-  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n \r\n-  // Effect hook to determine if the user is authenticated and load data\r\n-  useEffect(() => {\r\n-    const token = localStorage.getItem(\"access_token\");\r\n+  // Function to fetch planner data\r\n+  const fetchPlannerDataFromBackend = (token) => {\r\n+    if (!token) {\r\n+      setError(\"No authentication token found.\");\r\n+      setLoading(false);\r\n+      return;\r\n+    }\r\n \r\n-    if (token) {\r\n-      setIsAuthenticated(true);\r\n-      fetchPlannerDataFromBackend(token); // Fetch from backend if user is logged in\r\n-    } else {\r\n-      loadPlannerDataFromLocalStorage(); // Use localStorage if user is not logged in\r\n+    // Decode token and check for expiration\r\n+    const decodedToken = jwt_decode(token);\r\n+    if (decodedToken.exp < Date.now() / 1000) {\r\n+      setError(\"Session expired. Please log in again.\");\r\n+      setLoading(false);\r\n+      return;\r\n     }\r\n-  }, []);\r\n \r\n-  // Fetch planner data from backend if the user is authenticated\r\n-  const fetchPlannerDataFromBackend = (token) => {\r\n     setLoading(true);\r\n     axios\r\n       .get(\"http://127.0.0.1:8000/api/planner-list/\", {\r\n         headers: { Authorization: `Bearer ${token}` },\r\n@@ -44,176 +41,48 @@\n         });\r\n         setLoading(false);\r\n       })\r\n       .catch((error) => {\r\n+        console.error(\"Error fetching planner data:\", error.response || error);\r\n         setError(\"Error fetching planner data\");\r\n-        console.error(\"Error fetching planner data:\", error.response || error);\r\n         setLoading(false);\r\n       });\r\n   };\r\n \r\n-  // Load planner data from localStorage if the user is not authenticated\r\n-  const loadPlannerDataFromLocalStorage = () => {\r\n-    const storedPlanners = JSON.parse(localStorage.getItem(\"plannerList\")) || {\r\n-      venues: [],\r\n-      services: [],\r\n-      packages: [],\r\n-    };\r\n-    setPlanners(storedPlanners);\r\n-  };\r\n+  // UseEffect to fetch planner data when the component mounts\r\n+  useEffect(() => {\r\n+    const token = localStorage.getItem(\"access_token\");\r\n+    fetchPlannerDataFromBackend(token);\r\n+  }, []);\r\n \r\n-  // Add item to planner\r\n-  const addToPlanner = (item, type) => {\r\n-    setPlanners((prevPlanners) => {\r\n-      const updatedPlanners = { ...prevPlanners };\r\n-      updatedPlanners[type].push(item);\r\n-      localStorage.setItem(\"plannerList\", JSON.stringify(updatedPlanners));\r\n-      return updatedPlanners;\r\n-    });\r\n-\r\n-    if (isAuthenticated) {\r\n-      const token = localStorage.getItem(\"access_token\");\r\n-      axios\r\n-        .post(\r\n-          \"http://127.0.0.1:8000/api/planner-list/\",\r\n-          {\r\n-            venue: type === \"venues\" ? item.id : null,\r\n-            service: type === \"services\" ? item.id : null,\r\n-            package: type === \"packages\" ? item.id : null,\r\n-          },\r\n-          { headers: { Authorization: `Bearer ${token}` } }\r\n-        )\r\n-        .catch((error) => {\r\n-          console.error(\r\n-            \"Error adding item to planner:\",\r\n-            error.response || error\r\n-          );\r\n-        });\r\n-    }\r\n-  };\r\n-\r\n-  // Remove item from planner\r\n-  const removeFromPlanner = (itemId, type) => {\r\n-    setPlanners((prevPlanners) => {\r\n-      const updatedPlanners = { ...prevPlanners };\r\n-      updatedPlanners[type] = updatedPlanners[type].filter(\r\n-        (item) => item.id !== itemId\r\n-      );\r\n-      localStorage.setItem(\"plannerList\", JSON.stringify(updatedPlanners));\r\n-      return updatedPlanners;\r\n-    });\r\n-\r\n-    if (isAuthenticated) {\r\n-      const token = localStorage.getItem(\"access_token\");\r\n-      axios\r\n-        .delete(`http://127.0.0.1:8000/api/planner-list/${itemId}/`, {\r\n-          headers: { Authorization: `Bearer ${token}` },\r\n-        })\r\n-        .catch((error) => {\r\n-          console.error(\r\n-            \"Error removing item from planner:\",\r\n-            error.response || error\r\n-          );\r\n-        });\r\n-    }\r\n-  };\r\n-\r\n-  const { venues, services, packages } = planners;\r\n-  const totalItems = venues.length + services.length + packages.length;\r\n-\r\n   return (\r\n-    <div className={styles.planner_list_container}>\r\n-      <h1>Planner List</h1>\r\n-      <p>Total Items: {totalItems}</p>\r\n-      {error && <p className={styles.errormessage}>{error}</p>}\r\n-      {loading ? (\r\n-        <p>Loading...</p>\r\n-      ) : (\r\n-        <>\r\n-          {/* Venue Section */}\r\n-          <div className={styles.section}>\r\n-            <div\r\n-              className={styles.section_header}\r\n-              onClick={() => setShowVenues(!showVenues)}\r\n-            >\r\n-              <h2>Venues</h2>\r\n-              <span className={styles.item_count}>({venues.length})</span>\r\n-            </div>\r\n-            {showVenues && (\r\n-              <div className={styles.section_content}>\r\n-                {venues.length > 0 ? (\r\n-                  venues.map((venueItem) => (\r\n-                    <PlannerItemComponent\r\n-                      key={venueItem.id}\r\n-                      item={venueItem}\r\n-                      type=\"venues\"\r\n-                      onAdd={addToPlanner}\r\n-                      onRemove={removeFromPlanner}\r\n-                    />\r\n-                  ))\r\n-                ) : (\r\n-                  <p>No venues added yet.</p>\r\n-                )}\r\n-              </div>\r\n-            )}\r\n-          </div>\r\n-\r\n-          {/* Service Section */}\r\n-          <div className={styles.section}>\r\n-            <div\r\n-              className={styles.section_header}\r\n-              onClick={() => setShowServices(!showServices)}\r\n-            >\r\n-              <h2>Services</h2>\r\n-              <span className={styles.item_count}>({services.length})</span>\r\n-            </div>\r\n-            {showServices && (\r\n-              <div className={styles.section_content}>\r\n-                {services.length > 0 ? (\r\n-                  services.map((serviceItem) => (\r\n-                    <PlannerItemComponent\r\n-                      key={serviceItem.id}\r\n-                      item={serviceItem}\r\n-                      type=\"services\"\r\n-                      onAdd={addToPlanner}\r\n-                      onRemove={removeFromPlanner}\r\n-                    />\r\n-                  ))\r\n-                ) : (\r\n-                  <p>No services added yet.</p>\r\n-                )}\r\n-              </div>\r\n-            )}\r\n-          </div>\r\n-\r\n-          {/* Package Section */}\r\n-          <div className={styles.section}>\r\n-            <div\r\n-              className={styles.section_header}\r\n-              onClick={() => setShowPackages(!showPackages)}\r\n-            >\r\n-              <h2>Packages</h2>\r\n-              <span className={styles.item_count}>({packages.length})</span>\r\n-            </div>\r\n-            {showPackages && (\r\n-              <div className={styles.section_content}>\r\n-                {packages.length > 0 ? (\r\n-                  packages.map((packageItem) => (\r\n-                    <PlannerItemComponent\r\n-                      key={packageItem.id}\r\n-                      item={packageItem}\r\n-                      type=\"packages\"\r\n-                      onAdd={addToPlanner}\r\n-                      onRemove={removeFromPlanner}\r\n-                    />\r\n-                  ))\r\n-                ) : (\r\n-                  <p>No packages added yet.</p>\r\n-                )}\r\n-              </div>\r\n-            )}\r\n-          </div>\r\n-        </>\r\n+    <div>\r\n+      {loading && <p>Loading...</p>}\r\n+      {error && <p>{error}</p>}\r\n+      {!loading && !error && (\r\n+        <div>\r\n+          <h1>Planner List</h1>\r\n+          <h2>Venues</h2>\r\n+          <ul>\r\n+            {planners.venues.map((venue) => (\r\n+              <li key={venue.id}>{venue.name}</li>\r\n+            ))}\r\n+          </ul>\r\n+          <h2>Services</h2>\r\n+          <ul>\r\n+            {planners.services.map((service) => (\r\n+              <li key={service.id}>{service.name}</li>\r\n+            ))}\r\n+          </ul>\r\n+          <h2>Packages</h2>\r\n+          <ul>\r\n+            {planners.packages.map((packageItem) => (\r\n+              <li key={packageItem.id}>{packageItem.name}</li>\r\n+            ))}\r\n+          </ul>\r\n+        </div>\r\n       )}\r\n     </div>\r\n   );\r\n-}\r\n+};\r\n+\r\n+export default PlannerList;\r\n"
                },
                {
                    "date": 1731945968569,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,33 +1,36 @@\n import React, { useEffect, useState } from \"react\";\r\n import axios from \"axios\";\r\n-import jwt_decode from \"jwt-decode\";\r\n+import PlannerItemComponent from \"./PlannerItemComponent\"; // Import your PlannerItem component\r\n+import styles from \"../module_css/PlannerList.module.css\";\r\n \r\n-const PlannerList = () => {\r\n-  const [loading, setLoading] = useState(true);\r\n+export default function PlannerList() {\r\n   const [planners, setPlanners] = useState({\r\n     venues: [],\r\n     services: [],\r\n     packages: [],\r\n   });\r\n+  const [loading, setLoading] = useState(false);\r\n   const [error, setError] = useState(null);\r\n+  const [showVenues, setShowVenues] = useState(false);\r\n+  const [showServices, setShowServices] = useState(false);\r\n+  const [showPackages, setShowPackages] = useState(false);\r\n+  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n \r\n-  // Function to fetch planner data\r\n-  const fetchPlannerDataFromBackend = (token) => {\r\n-    if (!token) {\r\n-      setError(\"No authentication token found.\");\r\n-      setLoading(false);\r\n-      return;\r\n-    }\r\n+  // Effect hook to determine if the user is authenticated and load data\r\n+  useEffect(() => {\r\n+    const token = localStorage.getItem(\"access_token\");\r\n \r\n-    // Decode token and check for expiration\r\n-    const decodedToken = jwt_decode(token);\r\n-    if (decodedToken.exp < Date.now() / 1000) {\r\n-      setError(\"Session expired. Please log in again.\");\r\n-      setLoading(false);\r\n-      return;\r\n+    if (token) {\r\n+      setIsAuthenticated(true);\r\n+      fetchPlannerDataFromBackend(token); // Fetch from backend if user is logged in\r\n+    } else {\r\n+      loadPlannerDataFromLocalStorage(); // Use localStorage if user is not logged in\r\n     }\r\n+  }, []);\r\n \r\n+  // Fetch planner data from backend if the user is authenticated\r\n+  const fetchPlannerDataFromBackend = (token) => {\r\n     setLoading(true);\r\n     axios\r\n       .get(\"http://127.0.0.1:8000/api/planner-list/\", {\r\n         headers: { Authorization: `Bearer ${token}` },\r\n@@ -41,48 +44,176 @@\n         });\r\n         setLoading(false);\r\n       })\r\n       .catch((error) => {\r\n+        setError(\"Error fetching planner data\");\r\n         console.error(\"Error fetching planner data:\", error.response || error);\r\n-        setError(\"Error fetching planner data\");\r\n         setLoading(false);\r\n       });\r\n   };\r\n \r\n-  // UseEffect to fetch planner data when the component mounts\r\n-  useEffect(() => {\r\n-    const token = localStorage.getItem(\"access_token\");\r\n-    fetchPlannerDataFromBackend(token);\r\n-  }, []);\r\n+  // Load planner data from localStorage if the user is not authenticated\r\n+  const loadPlannerDataFromLocalStorage = () => {\r\n+    const storedPlanners = JSON.parse(localStorage.getItem(\"plannerList\")) || {\r\n+      venues: [],\r\n+      services: [],\r\n+      packages: [],\r\n+    };\r\n+    setPlanners(storedPlanners);\r\n+  };\r\n \r\n+  // Add item to planner\r\n+  const addToPlanner = (item, type) => {\r\n+    setPlanners((prevPlanners) => {\r\n+      const updatedPlanners = { ...prevPlanners };\r\n+      updatedPlanners[type].push(item);\r\n+      localStorage.setItem(\"plannerList\", JSON.stringify(updatedPlanners));\r\n+      return updatedPlanners;\r\n+    });\r\n+\r\n+    if (isAuthenticated) {\r\n+      const token = localStorage.getItem(\"access_token\");\r\n+      axios\r\n+        .post(\r\n+          \"http://127.0.0.1:8000/api/planner-list/\",\r\n+          {\r\n+            venue: type === \"venues\" ? item.id : null,\r\n+            service: type === \"services\" ? item.id : null,\r\n+            package: type === \"packages\" ? item.id : null,\r\n+          },\r\n+          { headers: { Authorization: `Bearer ${token}` } }\r\n+        )\r\n+        .catch((error) => {\r\n+          console.error(\r\n+            \"Error adding item to planner:\",\r\n+            error.response || error\r\n+          );\r\n+        });\r\n+    }\r\n+  };\r\n+\r\n+  // Remove item from planner\r\n+  const removeFromPlanner = (itemId, type) => {\r\n+    setPlanners((prevPlanners) => {\r\n+      const updatedPlanners = { ...prevPlanners };\r\n+      updatedPlanners[type] = updatedPlanners[type].filter(\r\n+        (item) => item.id !== itemId\r\n+      );\r\n+      localStorage.setItem(\"plannerList\", JSON.stringify(updatedPlanners));\r\n+      return updatedPlanners;\r\n+    });\r\n+\r\n+    if (isAuthenticated) {\r\n+      const token = localStorage.getItem(\"access_token\");\r\n+      axios\r\n+        .delete(`http://127.0.0.1:8000/api/planner-list/${itemId}/`, {\r\n+          headers: { Authorization: `Bearer ${token}` },\r\n+        })\r\n+        .catch((error) => {\r\n+          console.error(\r\n+            \"Error removing item from planner:\",\r\n+            error.response || error\r\n+          );\r\n+        });\r\n+    }\r\n+  };\r\n+\r\n+  const { venues, services, packages } = planners;\r\n+  const totalItems = venues.length + services.length + packages.length;\r\n+\r\n   return (\r\n-    <div>\r\n-      {loading && <p>Loading...</p>}\r\n-      {error && <p>{error}</p>}\r\n-      {!loading && !error && (\r\n-        <div>\r\n-          <h1>Planner List</h1>\r\n-          <h2>Venues</h2>\r\n-          <ul>\r\n-            {planners.venues.map((venue) => (\r\n-              <li key={venue.id}>{venue.name}</li>\r\n-            ))}\r\n-          </ul>\r\n-          <h2>Services</h2>\r\n-          <ul>\r\n-            {planners.services.map((service) => (\r\n-              <li key={service.id}>{service.name}</li>\r\n-            ))}\r\n-          </ul>\r\n-          <h2>Packages</h2>\r\n-          <ul>\r\n-            {planners.packages.map((packageItem) => (\r\n-              <li key={packageItem.id}>{packageItem.name}</li>\r\n-            ))}\r\n-          </ul>\r\n-        </div>\r\n+    <div className={styles.planner_list_container}>\r\n+      <h1>Planner List</h1>\r\n+      <p>Total Items: {totalItems}</p>\r\n+      {error && <p className={styles.errormessage}>{error}</p>}\r\n+      {loading ? (\r\n+        <p>Loading...</p>\r\n+      ) : (\r\n+        <>\r\n+          {/* Venue Section */}\r\n+          <div className={styles.section}>\r\n+            <div\r\n+              className={styles.section_header}\r\n+              onClick={() => setShowVenues(!showVenues)}\r\n+            >\r\n+              <h2>Venues</h2>\r\n+              <span className={styles.item_count}>({venues.length})</span>\r\n+            </div>\r\n+            {showVenues && (\r\n+              <div className={styles.section_content}>\r\n+                {venues.length > 0 ? (\r\n+                  venues.map((venueItem) => (\r\n+                    <PlannerItemComponent\r\n+                      key={venueItem.id}\r\n+                      item={venueItem}\r\n+                      type=\"venues\"\r\n+                      onAdd={addToPlanner}\r\n+                      onRemove={removeFromPlanner}\r\n+                    />\r\n+                  ))\r\n+                ) : (\r\n+                  <p>No venues added yet.</p>\r\n+                )}\r\n+              </div>\r\n+            )}\r\n+          </div>\r\n+\r\n+          {/* Service Section */}\r\n+          <div className={styles.section}>\r\n+            <div\r\n+              className={styles.section_header}\r\n+              onClick={() => setShowServices(!showServices)}\r\n+            >\r\n+              <h2>Services</h2>\r\n+              <span className={styles.item_count}>({services.length})</span>\r\n+            </div>\r\n+            {showServices && (\r\n+              <div className={styles.section_content}>\r\n+                {services.length > 0 ? (\r\n+                  services.map((serviceItem) => (\r\n+                    <PlannerItemComponent\r\n+                      key={serviceItem.id}\r\n+                      item={serviceItem}\r\n+                      type=\"services\"\r\n+                      onAdd={addToPlanner}\r\n+                      onRemove={removeFromPlanner}\r\n+                    />\r\n+                  ))\r\n+                ) : (\r\n+                  <p>No services added yet.</p>\r\n+                )}\r\n+              </div>\r\n+            )}\r\n+          </div>\r\n+\r\n+          {/* Package Section */}\r\n+          <div className={styles.section}>\r\n+            <div\r\n+              className={styles.section_header}\r\n+              onClick={() => setShowPackages(!showPackages)}\r\n+            >\r\n+              <h2>Packages</h2>\r\n+              <span className={styles.item_count}>({packages.length})</span>\r\n+            </div>\r\n+            {showPackages && (\r\n+              <div className={styles.section_content}>\r\n+                {packages.length > 0 ? (\r\n+                  packages.map((packageItem) => (\r\n+                    <PlannerItemComponent\r\n+                      key={packageItem.id}\r\n+                      item={packageItem}\r\n+                      type=\"packages\"\r\n+                      onAdd={addToPlanner}\r\n+                      onRemove={removeFromPlanner}\r\n+                    />\r\n+                  ))\r\n+                ) : (\r\n+                  <p>No packages added yet.</p>\r\n+                )}\r\n+              </div>\r\n+            )}\r\n+          </div>\r\n+        </>\r\n       )}\r\n     </div>\r\n   );\r\n-};\r\n-\r\n-export default PlannerList;\r\n+}\r\n"
                },
                {
                    "date": 1731946322392,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,128 +3,85 @@\n import PlannerItemComponent from \"./PlannerItemComponent\"; // Import your PlannerItem component\r\n import styles from \"../module_css/PlannerList.module.css\";\r\n \r\n export default function PlannerList() {\r\n-  const [planners, setPlanners] = useState({\r\n-    venues: [],\r\n-    services: [],\r\n-    packages: [],\r\n-  });\r\n-  const [loading, setLoading] = useState(false);\r\n+  const [venues, setVenues] = useState([]);\r\n+  const [services, setServices] = useState([]);\r\n+  const [packages, setPackages] = useState([]);\r\n+  const [loading, setLoading] = useState(true);\r\n   const [error, setError] = useState(null);\r\n   const [showVenues, setShowVenues] = useState(false);\r\n   const [showServices, setShowServices] = useState(false);\r\n   const [showPackages, setShowPackages] = useState(false);\r\n-  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n \r\n-  // Effect hook to determine if the user is authenticated and load data\r\n   useEffect(() => {\r\n-    const token = localStorage.getItem(\"access_token\");\r\n+    const fetchPlannerItems = async () => {\r\n+      try {\r\n+        const response = await axios.get(\"/api/planner-list/\", {\r\n+          headers: {\r\n+            Authorization: `Bearer ${localStorage.getItem(\"jwt_token\")}`, // Include JWT token if needed\r\n+          },\r\n+        });\r\n \r\n-    if (token) {\r\n-      setIsAuthenticated(true);\r\n-      fetchPlannerDataFromBackend(token); // Fetch from backend if user is logged in\r\n-    } else {\r\n-      loadPlannerDataFromLocalStorage(); // Use localStorage if user is not logged in\r\n-    }\r\n-  }, []);\r\n+        const venuesData = response.data.filter(\r\n+          (item) => item.type === \"venue\"\r\n+        );\r\n+        const servicesData = response.data.filter(\r\n+          (item) => item.type === \"service\"\r\n+        );\r\n+        const packagesData = response.data.filter(\r\n+          (item) => item.type === \"package\"\r\n+        );\r\n \r\n-  // Fetch planner data from backend if the user is authenticated\r\n-  const fetchPlannerDataFromBackend = (token) => {\r\n-    setLoading(true);\r\n-    axios\r\n-      .get(\"http://127.0.0.1:8000/api/planner-list/\", {\r\n-        headers: { Authorization: `Bearer ${token}` },\r\n-        withCredentials: true,\r\n-      })\r\n-      .then((response) => {\r\n-        setPlanners({\r\n-          venues: response.data.venues,\r\n-          services: response.data.services,\r\n-          packages: response.data.packages,\r\n-        });\r\n-        setLoading(false);\r\n-      })\r\n-      .catch((error) => {\r\n-        setError(\"Error fetching planner data\");\r\n-        console.error(\"Error fetching planner data:\", error.response || error);\r\n-        setLoading(false);\r\n-      });\r\n-  };\r\n-\r\n-  // Load planner data from localStorage if the user is not authenticated\r\n-  const loadPlannerDataFromLocalStorage = () => {\r\n-    const storedPlanners = JSON.parse(localStorage.getItem(\"plannerList\")) || {\r\n-      venues: [],\r\n-      services: [],\r\n-      packages: [],\r\n+        setVenues(venuesData);\r\n+        setServices(servicesData);\r\n+        setPackages(packagesData);\r\n+      } catch (error) {\r\n+        setError(\"Failed to load planner items.\");\r\n+      }\r\n+      setLoading(false);\r\n     };\r\n-    setPlanners(storedPlanners);\r\n-  };\r\n \r\n-  // Add item to planner\r\n-  const addToPlanner = (item, type) => {\r\n-    setPlanners((prevPlanners) => {\r\n-      const updatedPlanners = { ...prevPlanners };\r\n-      updatedPlanners[type].push(item);\r\n-      localStorage.setItem(\"plannerList\", JSON.stringify(updatedPlanners));\r\n-      return updatedPlanners;\r\n-    });\r\n+    fetchPlannerItems();\r\n+  }, []);\r\n \r\n-    if (isAuthenticated) {\r\n-      const token = localStorage.getItem(\"access_token\");\r\n-      axios\r\n-        .post(\r\n-          \"http://127.0.0.1:8000/api/planner-list/\",\r\n-          {\r\n-            venue: type === \"venues\" ? item.id : null,\r\n-            service: type === \"services\" ? item.id : null,\r\n-            package: type === \"packages\" ? item.id : null,\r\n+  const addToPlanner = async (item, type) => {\r\n+    try {\r\n+      const response = await axios.post(\r\n+        \"/api/add_to_planner/\",\r\n+        {\r\n+          [type]: item.id,\r\n+        },\r\n+        {\r\n+          headers: {\r\n+            Authorization: `Bearer ${localStorage.getItem(\"jwt_token\")}`, // JWT token if authenticated\r\n           },\r\n-          { headers: { Authorization: `Bearer ${token}` } }\r\n-        )\r\n-        .catch((error) => {\r\n-          console.error(\r\n-            \"Error adding item to planner:\",\r\n-            error.response || error\r\n-          );\r\n-        });\r\n+        }\r\n+      );\r\n+\r\n+      // Handle the success response\r\n+      alert(response.data.message);\r\n+      // Optionally update your state here to reflect the changes\r\n+    } catch (error) {\r\n+      console.error(\"Error adding to planner:\", error);\r\n+      setError(\"Failed to add item to planner.\");\r\n     }\r\n   };\r\n \r\n-  // Remove item from planner\r\n-  const removeFromPlanner = (itemId, type) => {\r\n-    setPlanners((prevPlanners) => {\r\n-      const updatedPlanners = { ...prevPlanners };\r\n-      updatedPlanners[type] = updatedPlanners[type].filter(\r\n-        (item) => item.id !== itemId\r\n-      );\r\n-      localStorage.setItem(\"plannerList\", JSON.stringify(updatedPlanners));\r\n-      return updatedPlanners;\r\n-    });\r\n-\r\n-    if (isAuthenticated) {\r\n-      const token = localStorage.getItem(\"access_token\");\r\n-      axios\r\n-        .delete(`http://127.0.0.1:8000/api/planner-list/${itemId}/`, {\r\n-          headers: { Authorization: `Bearer ${token}` },\r\n-        })\r\n-        .catch((error) => {\r\n-          console.error(\r\n-            \"Error removing item from planner:\",\r\n-            error.response || error\r\n-          );\r\n-        });\r\n+  const removeFromPlanner = async (item, type) => {\r\n+    try {\r\n+      // Similar to adding, you can create a `remove` endpoint in your backend\r\n+      // For now, just alert the user\r\n+      alert(\"Item removed from planner\");\r\n+    } catch (error) {\r\n+      console.error(\"Error removing from planner:\", error);\r\n+      setError(\"Failed to remove item from planner.\");\r\n     }\r\n   };\r\n \r\n-  const { venues, services, packages } = planners;\r\n-  const totalItems = venues.length + services.length + packages.length;\r\n-\r\n   return (\r\n     <div className={styles.planner_list_container}>\r\n       <h1>Planner List</h1>\r\n-      <p>Total Items: {totalItems}</p>\r\n       {error && <p className={styles.errormessage}>{error}</p>}\r\n       {loading ? (\r\n         <p>Loading...</p>\r\n       ) : (\r\n"
                },
                {
                    "date": 1731946490781,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,12 +17,12 @@\n     const fetchPlannerItems = async () => {\r\n       try {\r\n         const response = await axios.get(\"/api/planner-list/\", {\r\n           headers: {\r\n-            Authorization: `Bearer ${localStorage.getItem(\"jwt_token\")}`, // Include JWT token if needed\r\n+            Authorization: `Bearer ${localStorage.getItem(\"jwt_token\")}`, // Make sure the JWT token is stored in localStorage\r\n           },\r\n         });\r\n-\r\n+        console.log(\"Planner items response:\", response.data); // Add this line to inspect the response\r\n         const venuesData = response.data.filter(\r\n           (item) => item.type === \"venue\"\r\n         );\r\n         const servicesData = response.data.filter(\r\n@@ -35,11 +35,11 @@\n         setVenues(venuesData);\r\n         setServices(servicesData);\r\n         setPackages(packagesData);\r\n       } catch (error) {\r\n+        console.error(\"Error fetching planner items:\", error);\r\n         setError(\"Failed to load planner items.\");\r\n       }\r\n-      setLoading(false);\r\n     };\r\n \r\n     fetchPlannerItems();\r\n   }, []);\r\n"
                },
                {
                    "date": 1731946532730,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,12 +17,12 @@\n     const fetchPlannerItems = async () => {\r\n       try {\r\n         const response = await axios.get(\"/api/planner-list/\", {\r\n           headers: {\r\n-            Authorization: `Bearer ${localStorage.getItem(\"jwt_token\")}`, // Make sure the JWT token is stored in localStorage\r\n+            Authorization: `Bearer ${localStorage.getItem(\"jwt_token\")}`, // Include JWT token if needed\r\n           },\r\n         });\r\n-        console.log(\"Planner items response:\", response.data); // Add this line to inspect the response\r\n+\r\n         const venuesData = response.data.filter(\r\n           (item) => item.type === \"venue\"\r\n         );\r\n         const servicesData = response.data.filter(\r\n@@ -35,11 +35,11 @@\n         setVenues(venuesData);\r\n         setServices(servicesData);\r\n         setPackages(packagesData);\r\n       } catch (error) {\r\n-        console.error(\"Error fetching planner items:\", error);\r\n         setError(\"Failed to load planner items.\");\r\n       }\r\n+      setLoading(false);\r\n     };\r\n \r\n     fetchPlannerItems();\r\n   }, []);\r\n"
                },
                {
                    "date": 1731947781279,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,8 +21,10 @@\n             Authorization: `Bearer ${localStorage.getItem(\"jwt_token\")}`, // Include JWT token if needed\r\n           },\r\n         });\r\n \r\n+        console.log(\"Planner items fetched:\", response.data); // Log the response data\r\n+\r\n         const venuesData = response.data.filter(\r\n           (item) => item.type === \"venue\"\r\n         );\r\n         const servicesData = response.data.filter(\r\n"
                },
                {
                    "date": 1731947812621,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,31 +45,8 @@\n \r\n     fetchPlannerItems();\r\n   }, []);\r\n \r\n-  const addToPlanner = async (item, type) => {\r\n-    try {\r\n-      const response = await axios.post(\r\n-        \"/api/add_to_planner/\",\r\n-        {\r\n-          [type]: item.id,\r\n-        },\r\n-        {\r\n-          headers: {\r\n-            Authorization: `Bearer ${localStorage.getItem(\"jwt_token\")}`, // JWT token if authenticated\r\n-          },\r\n-        }\r\n-      );\r\n-\r\n-      // Handle the success response\r\n-      alert(response.data.message);\r\n-      // Optionally update your state here to reflect the changes\r\n-    } catch (error) {\r\n-      console.error(\"Error adding to planner:\", error);\r\n-      setError(\"Failed to add item to planner.\");\r\n-    }\r\n-  };\r\n-\r\n   const removeFromPlanner = async (item, type) => {\r\n     try {\r\n       // Similar to adding, you can create a `remove` endpoint in your backend\r\n       // For now, just alert the user\r\n"
                },
                {
                    "date": 1731948049996,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,8 +12,9 @@\n   const [showVenues, setShowVenues] = useState(false);\r\n   const [showServices, setShowServices] = useState(false);\r\n   const [showPackages, setShowPackages] = useState(false);\r\n \r\n+  // Fetch planner items\r\n   useEffect(() => {\r\n     const fetchPlannerItems = async () => {\r\n       try {\r\n         const response = await axios.get(\"/api/planner-list/\", {\r\n@@ -21,36 +22,65 @@\n             Authorization: `Bearer ${localStorage.getItem(\"jwt_token\")}`, // Include JWT token if needed\r\n           },\r\n         });\r\n \r\n-        console.log(\"Planner items fetched:\", response.data); // Log the response data\r\n+        console.log(\"Planner items fetched:\", response.data); // Add logging here to check response\r\n \r\n-        const venuesData = response.data.filter(\r\n-          (item) => item.type === \"venue\"\r\n-        );\r\n-        const servicesData = response.data.filter(\r\n-          (item) => item.type === \"service\"\r\n-        );\r\n-        const packagesData = response.data.filter(\r\n-          (item) => item.type === \"package\"\r\n-        );\r\n+        if (Array.isArray(response.data)) {\r\n+          const venuesData = response.data.filter(\r\n+            (item) => item.type === \"venue\"\r\n+          );\r\n+          const servicesData = response.data.filter(\r\n+            (item) => item.type === \"service\"\r\n+          );\r\n+          const packagesData = response.data.filter(\r\n+            (item) => item.type === \"package\"\r\n+          );\r\n \r\n-        setVenues(venuesData);\r\n-        setServices(servicesData);\r\n-        setPackages(packagesData);\r\n+          setVenues(venuesData);\r\n+          setServices(servicesData);\r\n+          setPackages(packagesData);\r\n+        } else {\r\n+          setError(\"Invalid data format from API.\");\r\n+        }\r\n       } catch (error) {\r\n+        console.error(\"Error fetching planner items:\", error);\r\n         setError(\"Failed to load planner items.\");\r\n       }\r\n+\r\n       setLoading(false);\r\n     };\r\n \r\n     fetchPlannerItems();\r\n   }, []);\r\n \r\n+  // Handle adding to planner\r\n+  const addToPlanner = async (item, type) => {\r\n+    try {\r\n+      const response = await axios.post(\r\n+        \"/api/add_to_planner/\",\r\n+        {\r\n+          [type]: item.id,\r\n+        },\r\n+        {\r\n+          headers: {\r\n+            Authorization: `Bearer ${localStorage.getItem(\"jwt_token\")}`, // JWT token if authenticated\r\n+          },\r\n+        }\r\n+      );\r\n+\r\n+      // Handle the success response\r\n+      alert(response.data.message);\r\n+    } catch (error) {\r\n+      console.error(\"Error adding to planner:\", error);\r\n+      setError(\"Failed to add item to planner.\");\r\n+    }\r\n+  };\r\n+\r\n+  // Handle removing from planner\r\n   const removeFromPlanner = async (item, type) => {\r\n     try {\r\n-      // Similar to adding, you can create a `remove` endpoint in your backend\r\n-      // For now, just alert the user\r\n+      // Placeholder for removing an item; you'd need to implement the API for this\r\n       alert(\"Item removed from planner\");\r\n     } catch (error) {\r\n       console.error(\"Error removing from planner:\", error);\r\n       setError(\"Failed to remove item from planner.\");\r\n@@ -60,8 +90,9 @@\n   return (\r\n     <div className={styles.planner_list_container}>\r\n       <h1>Planner List</h1>\r\n       {error && <p className={styles.errormessage}>{error}</p>}\r\n+\r\n       {loading ? (\r\n         <p>Loading...</p>\r\n       ) : (\r\n         <>\r\n"
                },
                {
                    "date": 1731948242740,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,13 +16,16 @@\n   // Fetch planner items\r\n   useEffect(() => {\r\n     const fetchPlannerItems = async () => {\r\n       try {\r\n-        const response = await axios.get(\"/api/planner-list/\", {\r\n-          headers: {\r\n-            Authorization: `Bearer ${localStorage.getItem(\"jwt_token\")}`, // Include JWT token if needed\r\n-          },\r\n-        });\r\n+        const response = await axios.get(\r\n+          \"http://127.0.0.1:8000/api/planner-list/\",\r\n+          {\r\n+            headers: {\r\n+              Authorization: `Bearer ${localStorage.getItem(\"jwt_token\")}`, // Include JWT token if needed\r\n+            },\r\n+          }\r\n+        );\r\n \r\n         console.log(\"Planner items fetched:\", response.data); // Add logging here to check response\r\n \r\n         if (Array.isArray(response.data)) {\r\n"
                },
                {
                    "date": 1731948300689,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,31 +55,8 @@\n \r\n     fetchPlannerItems();\r\n   }, []);\r\n \r\n-  // Handle adding to planner\r\n-  const addToPlanner = async (item, type) => {\r\n-    try {\r\n-      const response = await axios.post(\r\n-        \"/api/add_to_planner/\",\r\n-        {\r\n-          [type]: item.id,\r\n-        },\r\n-        {\r\n-          headers: {\r\n-            Authorization: `Bearer ${localStorage.getItem(\"jwt_token\")}`, // JWT token if authenticated\r\n-          },\r\n-        }\r\n-      );\r\n-\r\n-      // Handle the success response\r\n-      alert(response.data.message);\r\n-    } catch (error) {\r\n-      console.error(\"Error adding to planner:\", error);\r\n-      setError(\"Failed to add item to planner.\");\r\n-    }\r\n-  };\r\n-\r\n   // Handle removing from planner\r\n   const removeFromPlanner = async (item, type) => {\r\n     try {\r\n       // Placeholder for removing an item; you'd need to implement the API for this\r\n"
                },
                {
                    "date": 1731948646386,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,8 +55,18 @@\n \r\n     fetchPlannerItems();\r\n   }, []);\r\n \r\n+  // Handle adding to planner (placeholder for actual add functionality)\r\n+  const addToPlanner = async (item, type) => {\r\n+    try {\r\n+      alert(\"Item added to planner\"); // Placeholder action for adding\r\n+    } catch (error) {\r\n+      console.error(\"Error adding item to planner:\", error);\r\n+      setError(\"Failed to add item to planner.\");\r\n+    }\r\n+  };\r\n+\r\n   // Handle removing from planner\r\n   const removeFromPlanner = async (item, type) => {\r\n     try {\r\n       // Placeholder for removing an item; you'd need to implement the API for this\r\n@@ -91,9 +101,9 @@\n                   venues.map((venueItem) => (\r\n                     <PlannerItemComponent\r\n                       key={venueItem.id}\r\n                       item={venueItem}\r\n-                      type=\"venues\"\r\n+                      type=\"venue\"\r\n                       onAdd={addToPlanner}\r\n                       onRemove={removeFromPlanner}\r\n                     />\r\n                   ))\r\n@@ -119,9 +129,9 @@\n                   services.map((serviceItem) => (\r\n                     <PlannerItemComponent\r\n                       key={serviceItem.id}\r\n                       item={serviceItem}\r\n-                      type=\"services\"\r\n+                      type=\"service\"\r\n                       onAdd={addToPlanner}\r\n                       onRemove={removeFromPlanner}\r\n                     />\r\n                   ))\r\n@@ -147,9 +157,9 @@\n                   packages.map((packageItem) => (\r\n                     <PlannerItemComponent\r\n                       key={packageItem.id}\r\n                       item={packageItem}\r\n-                      type=\"packages\"\r\n+                      type=\"package\"\r\n                       onAdd={addToPlanner}\r\n                       onRemove={removeFromPlanner}\r\n                     />\r\n                   ))\r\n"
                },
                {
                    "date": 1731949679941,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,49 +3,49 @@\n import PlannerItemComponent from \"./PlannerItemComponent\"; // Import your PlannerItem component\r\n import styles from \"../module_css/PlannerList.module.css\";\r\n \r\n export default function PlannerList() {\r\n-  const [venues, setVenues] = useState([]);\r\n-  const [services, setServices] = useState([]);\r\n-  const [packages, setPackages] = useState([]);\r\n+  const [plannerItems, setPlannerItems] = useState([]);\r\n+  const [packages, setPackages] = useState({});\r\n   const [loading, setLoading] = useState(true);\r\n   const [error, setError] = useState(null);\r\n-  const [showVenues, setShowVenues] = useState(false);\r\n-  const [showServices, setShowServices] = useState(false);\r\n-  const [showPackages, setShowPackages] = useState(false);\r\n \r\n-  // Fetch planner items\r\n   useEffect(() => {\r\n     const fetchPlannerItems = async () => {\r\n       try {\r\n         const response = await axios.get(\r\n           \"http://127.0.0.1:8000/api/planner-list/\",\r\n           {\r\n             headers: {\r\n-              Authorization: `Bearer ${localStorage.getItem(\"jwt_token\")}`, // Include JWT token if needed\r\n+              Authorization: `Bearer ${localStorage.getItem(\"jwt_token\")}`,\r\n             },\r\n           }\r\n         );\r\n \r\n-        console.log(\"Planner items fetched:\", response.data); // Add logging here to check response\r\n+        console.log(\"Planner items fetched:\", response.data);\r\n \r\n-        if (Array.isArray(response.data)) {\r\n-          const venuesData = response.data.filter(\r\n-            (item) => item.type === \"venue\"\r\n+        // Get package IDs from the planner items\r\n+        const packageIds = response.data\r\n+          .filter((item) => item.package)\r\n+          .map((item) => item.package);\r\n+\r\n+        // Fetch package details if package IDs are present\r\n+        if (packageIds.length > 0) {\r\n+          const packageDetails = await Promise.all(\r\n+            packageIds.map((id) =>\r\n+              axios.get(`http://127.0.0.1:8000/api/packages/${id}/`)\r\n+            )\r\n           );\r\n-          const servicesData = response.data.filter(\r\n-            (item) => item.type === \"service\"\r\n-          );\r\n-          const packagesData = response.data.filter(\r\n-            (item) => item.type === \"package\"\r\n-          );\r\n \r\n-          setVenues(venuesData);\r\n-          setServices(servicesData);\r\n-          setPackages(packagesData);\r\n-        } else {\r\n-          setError(\"Invalid data format from API.\");\r\n+          const packagesMap = packageDetails.reduce((acc, res) => {\r\n+            acc[res.data.id] = res.data;\r\n+            return acc;\r\n+          }, {});\r\n+\r\n+          setPackages(packagesMap);\r\n         }\r\n+\r\n+        setPlannerItems(response.data);\r\n       } catch (error) {\r\n         console.error(\"Error fetching planner items:\", error);\r\n         setError(\"Failed to load planner items.\");\r\n       }\r\n@@ -55,122 +55,32 @@\n \r\n     fetchPlannerItems();\r\n   }, []);\r\n \r\n-  // Handle adding to planner (placeholder for actual add functionality)\r\n-  const addToPlanner = async (item, type) => {\r\n-    try {\r\n-      alert(\"Item added to planner\"); // Placeholder action for adding\r\n-    } catch (error) {\r\n-      console.error(\"Error adding item to planner:\", error);\r\n-      setError(\"Failed to add item to planner.\");\r\n-    }\r\n-  };\r\n-\r\n-  // Handle removing from planner\r\n-  const removeFromPlanner = async (item, type) => {\r\n-    try {\r\n-      // Placeholder for removing an item; you'd need to implement the API for this\r\n-      alert(\"Item removed from planner\");\r\n-    } catch (error) {\r\n-      console.error(\"Error removing from planner:\", error);\r\n-      setError(\"Failed to remove item from planner.\");\r\n-    }\r\n-  };\r\n-\r\n   return (\r\n     <div className={styles.planner_list_container}>\r\n       <h1>Planner List</h1>\r\n       {error && <p className={styles.errormessage}>{error}</p>}\r\n \r\n       {loading ? (\r\n         <p>Loading...</p>\r\n       ) : (\r\n-        <>\r\n-          {/* Venue Section */}\r\n-          <div className={styles.section}>\r\n-            <div\r\n-              className={styles.section_header}\r\n-              onClick={() => setShowVenues(!showVenues)}\r\n-            >\r\n-              <h2>Venues</h2>\r\n-              <span className={styles.item_count}>({venues.length})</span>\r\n+        plannerItems.map((item) => {\r\n+          const packageDetails = packages[item.package];\r\n+          return (\r\n+            <div key={item.id}>\r\n+              <PlannerItemComponent item={item} />\r\n+              {packageDetails && (\r\n+                <div>\r\n+                  <h3>Package Details:</h3>\r\n+                  <p>Package Name: {packageDetails.name}</p>\r\n+                  <p>Package Description: {packageDetails.description}</p>\r\n+                  {/* Add any other package details here */}\r\n+                </div>\r\n+              )}\r\n             </div>\r\n-            {showVenues && (\r\n-              <div className={styles.section_content}>\r\n-                {venues.length > 0 ? (\r\n-                  venues.map((venueItem) => (\r\n-                    <PlannerItemComponent\r\n-                      key={venueItem.id}\r\n-                      item={venueItem}\r\n-                      type=\"venue\"\r\n-                      onAdd={addToPlanner}\r\n-                      onRemove={removeFromPlanner}\r\n-                    />\r\n-                  ))\r\n-                ) : (\r\n-                  <p>No venues added yet.</p>\r\n-                )}\r\n-              </div>\r\n-            )}\r\n-          </div>\r\n-\r\n-          {/* Service Section */}\r\n-          <div className={styles.section}>\r\n-            <div\r\n-              className={styles.section_header}\r\n-              onClick={() => setShowServices(!showServices)}\r\n-            >\r\n-              <h2>Services</h2>\r\n-              <span className={styles.item_count}>({services.length})</span>\r\n-            </div>\r\n-            {showServices && (\r\n-              <div className={styles.section_content}>\r\n-                {services.length > 0 ? (\r\n-                  services.map((serviceItem) => (\r\n-                    <PlannerItemComponent\r\n-                      key={serviceItem.id}\r\n-                      item={serviceItem}\r\n-                      type=\"service\"\r\n-                      onAdd={addToPlanner}\r\n-                      onRemove={removeFromPlanner}\r\n-                    />\r\n-                  ))\r\n-                ) : (\r\n-                  <p>No services added yet.</p>\r\n-                )}\r\n-              </div>\r\n-            )}\r\n-          </div>\r\n-\r\n-          {/* Package Section */}\r\n-          <div className={styles.section}>\r\n-            <div\r\n-              className={styles.section_header}\r\n-              onClick={() => setShowPackages(!showPackages)}\r\n-            >\r\n-              <h2>Packages</h2>\r\n-              <span className={styles.item_count}>({packages.length})</span>\r\n-            </div>\r\n-            {showPackages && (\r\n-              <div className={styles.section_content}>\r\n-                {packages.length > 0 ? (\r\n-                  packages.map((packageItem) => (\r\n-                    <PlannerItemComponent\r\n-                      key={packageItem.id}\r\n-                      item={packageItem}\r\n-                      type=\"package\"\r\n-                      onAdd={addToPlanner}\r\n-                      onRemove={removeFromPlanner}\r\n-                    />\r\n-                  ))\r\n-                ) : (\r\n-                  <p>No packages added yet.</p>\r\n-                )}\r\n-              </div>\r\n-            )}\r\n-          </div>\r\n-        </>\r\n+          );\r\n+        })\r\n       )}\r\n     </div>\r\n   );\r\n }\r\n"
                },
                {
                    "date": 1731949687490,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,49 +3,49 @@\n import PlannerItemComponent from \"./PlannerItemComponent\"; // Import your PlannerItem component\r\n import styles from \"../module_css/PlannerList.module.css\";\r\n \r\n export default function PlannerList() {\r\n-  const [plannerItems, setPlannerItems] = useState([]);\r\n-  const [packages, setPackages] = useState({});\r\n+  const [venues, setVenues] = useState([]);\r\n+  const [services, setServices] = useState([]);\r\n+  const [packages, setPackages] = useState([]);\r\n   const [loading, setLoading] = useState(true);\r\n   const [error, setError] = useState(null);\r\n+  const [showVenues, setShowVenues] = useState(false);\r\n+  const [showServices, setShowServices] = useState(false);\r\n+  const [showPackages, setShowPackages] = useState(false);\r\n \r\n+  // Fetch planner items\r\n   useEffect(() => {\r\n     const fetchPlannerItems = async () => {\r\n       try {\r\n         const response = await axios.get(\r\n           \"http://127.0.0.1:8000/api/planner-list/\",\r\n           {\r\n             headers: {\r\n-              Authorization: `Bearer ${localStorage.getItem(\"jwt_token\")}`,\r\n+              Authorization: `Bearer ${localStorage.getItem(\"jwt_token\")}`, // Include JWT token if needed\r\n             },\r\n           }\r\n         );\r\n \r\n-        console.log(\"Planner items fetched:\", response.data);\r\n+        console.log(\"Planner items fetched:\", response.data); // Add logging here to check response\r\n \r\n-        // Get package IDs from the planner items\r\n-        const packageIds = response.data\r\n-          .filter((item) => item.package)\r\n-          .map((item) => item.package);\r\n-\r\n-        // Fetch package details if package IDs are present\r\n-        if (packageIds.length > 0) {\r\n-          const packageDetails = await Promise.all(\r\n-            packageIds.map((id) =>\r\n-              axios.get(`http://127.0.0.1:8000/api/packages/${id}/`)\r\n-            )\r\n+        if (Array.isArray(response.data)) {\r\n+          const venuesData = response.data.filter(\r\n+            (item) => item.type === \"venue\"\r\n           );\r\n+          const servicesData = response.data.filter(\r\n+            (item) => item.type === \"service\"\r\n+          );\r\n+          const packagesData = response.data.filter(\r\n+            (item) => item.type === \"package\"\r\n+          );\r\n \r\n-          const packagesMap = packageDetails.reduce((acc, res) => {\r\n-            acc[res.data.id] = res.data;\r\n-            return acc;\r\n-          }, {});\r\n-\r\n-          setPackages(packagesMap);\r\n+          setVenues(venuesData);\r\n+          setServices(servicesData);\r\n+          setPackages(packagesData);\r\n+        } else {\r\n+          setError(\"Invalid data format from API.\");\r\n         }\r\n-\r\n-        setPlannerItems(response.data);\r\n       } catch (error) {\r\n         console.error(\"Error fetching planner items:\", error);\r\n         setError(\"Failed to load planner items.\");\r\n       }\r\n@@ -55,32 +55,122 @@\n \r\n     fetchPlannerItems();\r\n   }, []);\r\n \r\n+  // Handle adding to planner (placeholder for actual add functionality)\r\n+  const addToPlanner = async (item, type) => {\r\n+    try {\r\n+      alert(\"Item added to planner\"); // Placeholder action for adding\r\n+    } catch (error) {\r\n+      console.error(\"Error adding item to planner:\", error);\r\n+      setError(\"Failed to add item to planner.\");\r\n+    }\r\n+  };\r\n+\r\n+  // Handle removing from planner\r\n+  const removeFromPlanner = async (item, type) => {\r\n+    try {\r\n+      // Placeholder for removing an item; you'd need to implement the API for this\r\n+      alert(\"Item removed from planner\");\r\n+    } catch (error) {\r\n+      console.error(\"Error removing from planner:\", error);\r\n+      setError(\"Failed to remove item from planner.\");\r\n+    }\r\n+  };\r\n+\r\n   return (\r\n     <div className={styles.planner_list_container}>\r\n       <h1>Planner List</h1>\r\n       {error && <p className={styles.errormessage}>{error}</p>}\r\n \r\n       {loading ? (\r\n         <p>Loading...</p>\r\n       ) : (\r\n-        plannerItems.map((item) => {\r\n-          const packageDetails = packages[item.package];\r\n-          return (\r\n-            <div key={item.id}>\r\n-              <PlannerItemComponent item={item} />\r\n-              {packageDetails && (\r\n-                <div>\r\n-                  <h3>Package Details:</h3>\r\n-                  <p>Package Name: {packageDetails.name}</p>\r\n-                  <p>Package Description: {packageDetails.description}</p>\r\n-                  {/* Add any other package details here */}\r\n-                </div>\r\n-              )}\r\n+        <>\r\n+          {/* Venue Section */}\r\n+          <div className={styles.section}>\r\n+            <div\r\n+              className={styles.section_header}\r\n+              onClick={() => setShowVenues(!showVenues)}\r\n+            >\r\n+              <h2>Venues</h2>\r\n+              <span className={styles.item_count}>({venues.length})</span>\r\n             </div>\r\n-          );\r\n-        })\r\n+            {showVenues && (\r\n+              <div className={styles.section_content}>\r\n+                {venues.length > 0 ? (\r\n+                  venues.map((venueItem) => (\r\n+                    <PlannerItemComponent\r\n+                      key={venueItem.id}\r\n+                      item={venueItem}\r\n+                      type=\"venue\"\r\n+                      onAdd={addToPlanner}\r\n+                      onRemove={removeFromPlanner}\r\n+                    />\r\n+                  ))\r\n+                ) : (\r\n+                  <p>No venues added yet.</p>\r\n+                )}\r\n+              </div>\r\n+            )}\r\n+          </div>\r\n+\r\n+          {/* Service Section */}\r\n+          <div className={styles.section}>\r\n+            <div\r\n+              className={styles.section_header}\r\n+              onClick={() => setShowServices(!showServices)}\r\n+            >\r\n+              <h2>Services</h2>\r\n+              <span className={styles.item_count}>({services.length})</span>\r\n+            </div>\r\n+            {showServices && (\r\n+              <div className={styles.section_content}>\r\n+                {services.length > 0 ? (\r\n+                  services.map((serviceItem) => (\r\n+                    <PlannerItemComponent\r\n+                      key={serviceItem.id}\r\n+                      item={serviceItem}\r\n+                      type=\"service\"\r\n+                      onAdd={addToPlanner}\r\n+                      onRemove={removeFromPlanner}\r\n+                    />\r\n+                  ))\r\n+                ) : (\r\n+                  <p>No services added yet.</p>\r\n+                )}\r\n+              </div>\r\n+            )}\r\n+          </div>\r\n+\r\n+          {/* Package Section */}\r\n+          <div className={styles.section}>\r\n+            <div\r\n+              className={styles.section_header}\r\n+              onClick={() => setShowPackages(!showPackages)}\r\n+            >\r\n+              <h2>Packages</h2>\r\n+              <span className={styles.item_count}>({packages.length})</span>\r\n+            </div>\r\n+            {showPackages && (\r\n+              <div className={styles.section_content}>\r\n+                {packages.length > 0 ? (\r\n+                  packages.map((packageItem) => (\r\n+                    <PlannerItemComponent\r\n+                      key={packageItem.id}\r\n+                      item={packageItem}\r\n+                      type=\"package\"\r\n+                      onAdd={addToPlanner}\r\n+                      onRemove={removeFromPlanner}\r\n+                    />\r\n+                  ))\r\n+                ) : (\r\n+                  <p>No packages added yet.</p>\r\n+                )}\r\n+              </div>\r\n+            )}\r\n+          </div>\r\n+        </>\r\n       )}\r\n     </div>\r\n   );\r\n }\r\n"
                },
                {
                    "date": 1731949813253,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,18 +3,19 @@\n import PlannerItemComponent from \"./PlannerItemComponent\"; // Import your PlannerItem component\r\n import styles from \"../module_css/PlannerList.module.css\";\r\n \r\n export default function PlannerList() {\r\n-  const [venues, setVenues] = useState([]);\r\n-  const [services, setServices] = useState([]);\r\n-  const [packages, setPackages] = useState([]);\r\n+  const [plannerItems, setPlannerItems] = useState([]);\r\n+  const [packages, setPackages] = useState({});\r\n+  const [venues, setVenues] = useState({});\r\n+  const [services, setServices] = useState({});\r\n   const [loading, setLoading] = useState(true);\r\n   const [error, setError] = useState(null);\r\n   const [showVenues, setShowVenues] = useState(false);\r\n   const [showServices, setShowServices] = useState(false);\r\n   const [showPackages, setShowPackages] = useState(false);\r\n \r\n-  // Fetch planner items\r\n+  // Fetch planner items and related data\r\n   useEffect(() => {\r\n     const fetchPlannerItems = async () => {\r\n       try {\r\n         const response = await axios.get(\r\n@@ -28,21 +29,72 @@\n \r\n         console.log(\"Planner items fetched:\", response.data); // Add logging here to check response\r\n \r\n         if (Array.isArray(response.data)) {\r\n-          const venuesData = response.data.filter(\r\n-            (item) => item.type === \"venue\"\r\n-          );\r\n-          const servicesData = response.data.filter(\r\n-            (item) => item.type === \"service\"\r\n-          );\r\n-          const packagesData = response.data.filter(\r\n-            (item) => item.type === \"package\"\r\n-          );\r\n+          setPlannerItems(response.data);\r\n \r\n-          setVenues(venuesData);\r\n-          setServices(servicesData);\r\n-          setPackages(packagesData);\r\n+          // Extract unique IDs for packages, services, and venues to fetch their details\r\n+          const packageIds = [\r\n+            ...new Set(\r\n+              response.data\r\n+                .filter((item) => item.package)\r\n+                .map((item) => item.package)\r\n+            ),\r\n+          ];\r\n+          const venueIds = [\r\n+            ...new Set(\r\n+              response.data\r\n+                .filter((item) => item.venue)\r\n+                .map((item) => item.venue)\r\n+            ),\r\n+          ];\r\n+          const serviceIds = [\r\n+            ...new Set(\r\n+              response.data\r\n+                .filter((item) => item.service)\r\n+                .map((item) => item.service)\r\n+            ),\r\n+          ];\r\n+\r\n+          // Fetch packages, venues, and services details\r\n+          if (packageIds.length > 0) {\r\n+            const packageDetails = await Promise.all(\r\n+              packageIds.map((id) =>\r\n+                axios.get(`http://127.0.0.1:8000/api/packages/${id}/`)\r\n+              )\r\n+            );\r\n+            const packageMap = packageDetails.reduce((acc, res) => {\r\n+              acc[res.data.id] = res.data;\r\n+              return acc;\r\n+            }, {});\r\n+            setPackages(packageMap);\r\n+          }\r\n+\r\n+          if (venueIds.length > 0) {\r\n+            const venueDetails = await Promise.all(\r\n+              venueIds.map((id) =>\r\n+                axios.get(`http://127.0.0.1:8000/api/venues/${id}/`)\r\n+              )\r\n+            );\r\n+            const venueMap = venueDetails.reduce((acc, res) => {\r\n+              acc[res.data.id] = res.data;\r\n+              return acc;\r\n+            }, {});\r\n+            setVenues(venueMap);\r\n+          }\r\n+\r\n+          if (serviceIds.length > 0) {\r\n+            const serviceDetails = await Promise.all(\r\n+              serviceIds.map((id) =>\r\n+                axios.get(`http://127.0.0.1:8000/api/services/${id}/`)\r\n+              )\r\n+            );\r\n+            const serviceMap = serviceDetails.reduce((acc, res) => {\r\n+              acc[res.data.id] = res.data;\r\n+              return acc;\r\n+            }, {});\r\n+            setServices(serviceMap);\r\n+          }\r\n         } else {\r\n           setError(\"Invalid data format from API.\");\r\n         }\r\n       } catch (error) {\r\n@@ -96,21 +148,22 @@\n               <span className={styles.item_count}>({venues.length})</span>\r\n             </div>\r\n             {showVenues && (\r\n               <div className={styles.section_content}>\r\n-                {venues.length > 0 ? (\r\n-                  venues.map((venueItem) => (\r\n-                    <PlannerItemComponent\r\n-                      key={venueItem.id}\r\n-                      item={venueItem}\r\n-                      type=\"venue\"\r\n-                      onAdd={addToPlanner}\r\n-                      onRemove={removeFromPlanner}\r\n-                    />\r\n-                  ))\r\n-                ) : (\r\n-                  <p>No venues added yet.</p>\r\n-                )}\r\n+                {plannerItems\r\n+                  .filter((item) => item.venue)\r\n+                  .map((venueItem) => {\r\n+                    const venueDetails = venues[venueItem.venue];\r\n+                    return (\r\n+                      <PlannerItemComponent\r\n+                        key={venueItem.id}\r\n+                        item={venueDetails}\r\n+                        type=\"venue\"\r\n+                        onAdd={addToPlanner}\r\n+                        onRemove={removeFromPlanner}\r\n+                      />\r\n+                    );\r\n+                  })}\r\n               </div>\r\n             )}\r\n           </div>\r\n \r\n@@ -124,21 +177,22 @@\n               <span className={styles.item_count}>({services.length})</span>\r\n             </div>\r\n             {showServices && (\r\n               <div className={styles.section_content}>\r\n-                {services.length > 0 ? (\r\n-                  services.map((serviceItem) => (\r\n-                    <PlannerItemComponent\r\n-                      key={serviceItem.id}\r\n-                      item={serviceItem}\r\n-                      type=\"service\"\r\n-                      onAdd={addToPlanner}\r\n-                      onRemove={removeFromPlanner}\r\n-                    />\r\n-                  ))\r\n-                ) : (\r\n-                  <p>No services added yet.</p>\r\n-                )}\r\n+                {plannerItems\r\n+                  .filter((item) => item.service)\r\n+                  .map((serviceItem) => {\r\n+                    const serviceDetails = services[serviceItem.service];\r\n+                    return (\r\n+                      <PlannerItemComponent\r\n+                        key={serviceItem.id}\r\n+                        item={serviceDetails}\r\n+                        type=\"service\"\r\n+                        onAdd={addToPlanner}\r\n+                        onRemove={removeFromPlanner}\r\n+                      />\r\n+                    );\r\n+                  })}\r\n               </div>\r\n             )}\r\n           </div>\r\n \r\n@@ -152,21 +206,22 @@\n               <span className={styles.item_count}>({packages.length})</span>\r\n             </div>\r\n             {showPackages && (\r\n               <div className={styles.section_content}>\r\n-                {packages.length > 0 ? (\r\n-                  packages.map((packageItem) => (\r\n-                    <PlannerItemComponent\r\n-                      key={packageItem.id}\r\n-                      item={packageItem}\r\n-                      type=\"package\"\r\n-                      onAdd={addToPlanner}\r\n-                      onRemove={removeFromPlanner}\r\n-                    />\r\n-                  ))\r\n-                ) : (\r\n-                  <p>No packages added yet.</p>\r\n-                )}\r\n+                {plannerItems\r\n+                  .filter((item) => item.package)\r\n+                  .map((packageItem) => {\r\n+                    const packageDetails = packages[packageItem.package];\r\n+                    return (\r\n+                      <PlannerItemComponent\r\n+                        key={packageItem.id}\r\n+                        item={packageDetails}\r\n+                        type=\"package\"\r\n+                        onAdd={addToPlanner}\r\n+                        onRemove={removeFromPlanner}\r\n+                      />\r\n+                    );\r\n+                  })}\r\n               </div>\r\n             )}\r\n           </div>\r\n         </>\r\n"
                },
                {
                    "date": 1731949874966,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,98 +3,46 @@\n import PlannerItemComponent from \"./PlannerItemComponent\"; // Import your PlannerItem component\r\n import styles from \"../module_css/PlannerList.module.css\";\r\n \r\n export default function PlannerList() {\r\n-  const [plannerItems, setPlannerItems] = useState([]);\r\n-  const [packages, setPackages] = useState({});\r\n-  const [venues, setVenues] = useState({});\r\n-  const [services, setServices] = useState({});\r\n+  const [venues, setVenues] = useState([]);\r\n+  const [services, setServices] = useState([]);\r\n+  const [packages, setPackages] = useState([]);\r\n   const [loading, setLoading] = useState(true);\r\n   const [error, setError] = useState(null);\r\n   const [showVenues, setShowVenues] = useState(false);\r\n   const [showServices, setShowServices] = useState(false);\r\n   const [showPackages, setShowPackages] = useState(false);\r\n \r\n-  // Fetch planner items and related data\r\n+  // Fetch planner items\r\n   useEffect(() => {\r\n     const fetchPlannerItems = async () => {\r\n       try {\r\n         const response = await axios.get(\r\n           \"http://127.0.0.1:8000/api/planner-list/\",\r\n           {\r\n             headers: {\r\n-              Authorization: `Bearer ${localStorage.getItem(\"jwt_token\")}`, // Include JWT token if needed\r\n+              Authorization: Bearer ${localStorage.getItem(\"jwt_token\")}, // Include JWT token if needed\r\n             },\r\n           }\r\n         );\r\n \r\n         console.log(\"Planner items fetched:\", response.data); // Add logging here to check response\r\n \r\n         if (Array.isArray(response.data)) {\r\n-          setPlannerItems(response.data);\r\n+          const venuesData = response.data.filter(\r\n+            (item) => item.type === \"venue\"\r\n+          );\r\n+          const servicesData = response.data.filter(\r\n+            (item) => item.type === \"service\"\r\n+          );\r\n+          const packagesData = response.data.filter(\r\n+            (item) => item.type === \"package\"\r\n+          );\r\n \r\n-          // Extract unique IDs for packages, services, and venues to fetch their details\r\n-          const packageIds = [\r\n-            ...new Set(\r\n-              response.data\r\n-                .filter((item) => item.package)\r\n-                .map((item) => item.package)\r\n-            ),\r\n-          ];\r\n-          const venueIds = [\r\n-            ...new Set(\r\n-              response.data\r\n-                .filter((item) => item.venue)\r\n-                .map((item) => item.venue)\r\n-            ),\r\n-          ];\r\n-          const serviceIds = [\r\n-            ...new Set(\r\n-              response.data\r\n-                .filter((item) => item.service)\r\n-                .map((item) => item.service)\r\n-            ),\r\n-          ];\r\n-\r\n-          // Fetch packages, venues, and services details\r\n-          if (packageIds.length > 0) {\r\n-            const packageDetails = await Promise.all(\r\n-              packageIds.map((id) =>\r\n-                axios.get(`http://127.0.0.1:8000/api/packages/${id}/`)\r\n-              )\r\n-            );\r\n-            const packageMap = packageDetails.reduce((acc, res) => {\r\n-              acc[res.data.id] = res.data;\r\n-              return acc;\r\n-            }, {});\r\n-            setPackages(packageMap);\r\n-          }\r\n-\r\n-          if (venueIds.length > 0) {\r\n-            const venueDetails = await Promise.all(\r\n-              venueIds.map((id) =>\r\n-                axios.get(`http://127.0.0.1:8000/api/venues/${id}/`)\r\n-              )\r\n-            );\r\n-            const venueMap = venueDetails.reduce((acc, res) => {\r\n-              acc[res.data.id] = res.data;\r\n-              return acc;\r\n-            }, {});\r\n-            setVenues(venueMap);\r\n-          }\r\n-\r\n-          if (serviceIds.length > 0) {\r\n-            const serviceDetails = await Promise.all(\r\n-              serviceIds.map((id) =>\r\n-                axios.get(`http://127.0.0.1:8000/api/services/${id}/`)\r\n-              )\r\n-            );\r\n-            const serviceMap = serviceDetails.reduce((acc, res) => {\r\n-              acc[res.data.id] = res.data;\r\n-              return acc;\r\n-            }, {});\r\n-            setServices(serviceMap);\r\n-          }\r\n+          setVenues(venuesData);\r\n+          setServices(servicesData);\r\n+          setPackages(packagesData);\r\n         } else {\r\n           setError(\"Invalid data format from API.\");\r\n         }\r\n       } catch (error) {\r\n@@ -148,22 +96,21 @@\n               <span className={styles.item_count}>({venues.length})</span>\r\n             </div>\r\n             {showVenues && (\r\n               <div className={styles.section_content}>\r\n-                {plannerItems\r\n-                  .filter((item) => item.venue)\r\n-                  .map((venueItem) => {\r\n-                    const venueDetails = venues[venueItem.venue];\r\n-                    return (\r\n-                      <PlannerItemComponent\r\n-                        key={venueItem.id}\r\n-                        item={venueDetails}\r\n-                        type=\"venue\"\r\n-                        onAdd={addToPlanner}\r\n-                        onRemove={removeFromPlanner}\r\n-                      />\r\n-                    );\r\n-                  })}\r\n+                {venues.length > 0 ? (\r\n+                  venues.map((venueItem) => (\r\n+                    <PlannerItemComponent\r\n+                      key={venueItem.id}\r\n+                      item={venueItem}\r\n+                      type=\"venue\"\r\n+                      onAdd={addToPlanner}\r\n+                      onRemove={removeFromPlanner}\r\n+                    />\r\n+                  ))\r\n+                ) : (\r\n+                  <p>No venues added yet.</p>\r\n+                )}\r\n               </div>\r\n             )}\r\n           </div>\r\n \r\n@@ -177,22 +124,21 @@\n               <span className={styles.item_count}>({services.length})</span>\r\n             </div>\r\n             {showServices && (\r\n               <div className={styles.section_content}>\r\n-                {plannerItems\r\n-                  .filter((item) => item.service)\r\n-                  .map((serviceItem) => {\r\n-                    const serviceDetails = services[serviceItem.service];\r\n-                    return (\r\n-                      <PlannerItemComponent\r\n-                        key={serviceItem.id}\r\n-                        item={serviceDetails}\r\n-                        type=\"service\"\r\n-                        onAdd={addToPlanner}\r\n-                        onRemove={removeFromPlanner}\r\n-                      />\r\n-                    );\r\n-                  })}\r\n+                {services.length > 0 ? (\r\n+                  services.map((serviceItem) => (\r\n+                    <PlannerItemComponent\r\n+                      key={serviceItem.id}\r\n+                      item={serviceItem}\r\n+                      type=\"service\"\r\n+                      onAdd={addToPlanner}\r\n+                      onRemove={removeFromPlanner}\r\n+                    />\r\n+                  ))\r\n+                ) : (\r\n+                  <p>No services added yet.</p>\r\n+                )}\r\n               </div>\r\n             )}\r\n           </div>\r\n \r\n@@ -206,26 +152,25 @@\n               <span className={styles.item_count}>({packages.length})</span>\r\n             </div>\r\n             {showPackages && (\r\n               <div className={styles.section_content}>\r\n-                {plannerItems\r\n-                  .filter((item) => item.package)\r\n-                  .map((packageItem) => {\r\n-                    const packageDetails = packages[packageItem.package];\r\n-                    return (\r\n-                      <PlannerItemComponent\r\n-                        key={packageItem.id}\r\n-                        item={packageDetails}\r\n-                        type=\"package\"\r\n-                        onAdd={addToPlanner}\r\n-                        onRemove={removeFromPlanner}\r\n-                      />\r\n-                    );\r\n-                  })}\r\n+                {packages.length > 0 ? (\r\n+                  packages.map((packageItem) => (\r\n+                    <PlannerItemComponent\r\n+                      key={packageItem.id}\r\n+                      item={packageItem}\r\n+                      type=\"package\"\r\n+                      onAdd={addToPlanner}\r\n+                      onRemove={removeFromPlanner}\r\n+                    />\r\n+                  ))\r\n+                ) : (\r\n+                  <p>No packages added yet.</p>\r\n+                )}\r\n               </div>\r\n             )}\r\n           </div>\r\n         </>\r\n       )}\r\n     </div>\r\n   );\r\n-}\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731949919997,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n         const response = await axios.get(\r\n           \"http://127.0.0.1:8000/api/planner-list/\",\r\n           {\r\n             headers: {\r\n-              Authorization: Bearer ${localStorage.getItem(\"jwt_token\")}, // Include JWT token if needed\r\n+              Authorization: `Bearer ${localStorage.getItem(\"jwt_token\")}`,\r\n             },\r\n           }\r\n         );\r\n \r\n@@ -172,5 +172,5 @@\n         </>\r\n       )}\r\n     </div>\r\n   );\r\n-}\n\\ No newline at end of file\n+}\r\n"
                },
                {
                    "date": 1731949951529,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,11 +3,12 @@\n import PlannerItemComponent from \"./PlannerItemComponent\"; // Import your PlannerItem component\r\n import styles from \"../module_css/PlannerList.module.css\";\r\n \r\n export default function PlannerList() {\r\n-  const [venues, setVenues] = useState([]);\r\n-  const [services, setServices] = useState([]);\r\n-  const [packages, setPackages] = useState([]);\r\n+  const [plannerItems, setPlannerItems] = useState([]);\r\n+  const [packages, setPackages] = useState({});\r\n+  const [venues, setVenues] = useState({});\r\n+  const [services, setServices] = useState({});\r\n   const [loading, setLoading] = useState(true);\r\n   const [error, setError] = useState(null);\r\n   const [showVenues, setShowVenues] = useState(false);\r\n   const [showServices, setShowServices] = useState(false);\r\n"
                },
                {
                    "date": 1731950027497,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,21 +29,72 @@\n \r\n         console.log(\"Planner items fetched:\", response.data); // Add logging here to check response\r\n \r\n         if (Array.isArray(response.data)) {\r\n-          const venuesData = response.data.filter(\r\n-            (item) => item.type === \"venue\"\r\n-          );\r\n-          const servicesData = response.data.filter(\r\n-            (item) => item.type === \"service\"\r\n-          );\r\n-          const packagesData = response.data.filter(\r\n-            (item) => item.type === \"package\"\r\n-          );\r\n+          setPlannerItems(response.data);\r\n \r\n-          setVenues(venuesData);\r\n-          setServices(servicesData);\r\n-          setPackages(packagesData);\r\n+          // Extract unique IDs for packages, services, and venues to fetch their details\r\n+          const packageIds = [\r\n+            ...new Set(\r\n+              response.data\r\n+                .filter((item) => item.package)\r\n+                .map((item) => item.package)\r\n+            ),\r\n+          ];\r\n+          const venueIds = [\r\n+            ...new Set(\r\n+              response.data\r\n+                .filter((item) => item.venue)\r\n+                .map((item) => item.venue)\r\n+            ),\r\n+          ];\r\n+          const serviceIds = [\r\n+            ...new Set(\r\n+              response.data\r\n+                .filter((item) => item.service)\r\n+                .map((item) => item.service)\r\n+            ),\r\n+          ];\r\n+\r\n+          // Fetch packages, venues, and services details\r\n+          if (packageIds.length > 0) {\r\n+            const packageDetails = await Promise.all(\r\n+              packageIds.map((id) =>\r\n+                axios.get(`http://127.0.0.1:8000/api/packages/${id}/`)\r\n+              )\r\n+            );\r\n+            const packageMap = packageDetails.reduce((acc, res) => {\r\n+              acc[res.data.id] = res.data;\r\n+              return acc;\r\n+            }, {});\r\n+            setPackages(packageMap);\r\n+          }\r\n+\r\n+          if (venueIds.length > 0) {\r\n+            const venueDetails = await Promise.all(\r\n+              venueIds.map((id) =>\r\n+                axios.get(`http://127.0.0.1:8000/api/venues/${id}/`)\r\n+              )\r\n+            );\r\n+            const venueMap = venueDetails.reduce((acc, res) => {\r\n+              acc[res.data.id] = res.data;\r\n+              return acc;\r\n+            }, {});\r\n+            setVenues(venueMap);\r\n+          }\r\n+\r\n+          if (serviceIds.length > 0) {\r\n+            const serviceDetails = await Promise.all(\r\n+              serviceIds.map((id) =>\r\n+                axios.get(`http://127.0.0.1:8000/api/services/${id}/`)\r\n+              )\r\n+            );\r\n+            const serviceMap = serviceDetails.reduce((acc, res) => {\r\n+              acc[res.data.id] = res.data;\r\n+              return acc;\r\n+            }, {});\r\n+            setServices(serviceMap);\r\n+          }\r\n         } else {\r\n           setError(\"Invalid data format from API.\");\r\n         }\r\n       } catch (error) {\r\n"
                },
                {
                    "date": 1731950074967,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,72 +29,21 @@\n \r\n         console.log(\"Planner items fetched:\", response.data); // Add logging here to check response\r\n \r\n         if (Array.isArray(response.data)) {\r\n-          setPlannerItems(response.data);\r\n+          const venuesData = response.data.filter(\r\n+            (item) => item.type === \"venue\"\r\n+          );\r\n+          const servicesData = response.data.filter(\r\n+            (item) => item.type === \"service\"\r\n+          );\r\n+          const packagesData = response.data.filter(\r\n+            (item) => item.type === \"package\"\r\n+          );\r\n \r\n-          // Extract unique IDs for packages, services, and venues to fetch their details\r\n-          const packageIds = [\r\n-            ...new Set(\r\n-              response.data\r\n-                .filter((item) => item.package)\r\n-                .map((item) => item.package)\r\n-            ),\r\n-          ];\r\n-          const venueIds = [\r\n-            ...new Set(\r\n-              response.data\r\n-                .filter((item) => item.venue)\r\n-                .map((item) => item.venue)\r\n-            ),\r\n-          ];\r\n-          const serviceIds = [\r\n-            ...new Set(\r\n-              response.data\r\n-                .filter((item) => item.service)\r\n-                .map((item) => item.service)\r\n-            ),\r\n-          ];\r\n-\r\n-          // Fetch packages, venues, and services details\r\n-          if (packageIds.length > 0) {\r\n-            const packageDetails = await Promise.all(\r\n-              packageIds.map((id) =>\r\n-                axios.get(`http://127.0.0.1:8000/api/packages/${id}/`)\r\n-              )\r\n-            );\r\n-            const packageMap = packageDetails.reduce((acc, res) => {\r\n-              acc[res.data.id] = res.data;\r\n-              return acc;\r\n-            }, {});\r\n-            setPackages(packageMap);\r\n-          }\r\n-\r\n-          if (venueIds.length > 0) {\r\n-            const venueDetails = await Promise.all(\r\n-              venueIds.map((id) =>\r\n-                axios.get(`http://127.0.0.1:8000/api/venues/${id}/`)\r\n-              )\r\n-            );\r\n-            const venueMap = venueDetails.reduce((acc, res) => {\r\n-              acc[res.data.id] = res.data;\r\n-              return acc;\r\n-            }, {});\r\n-            setVenues(venueMap);\r\n-          }\r\n-\r\n-          if (serviceIds.length > 0) {\r\n-            const serviceDetails = await Promise.all(\r\n-              serviceIds.map((id) =>\r\n-                axios.get(`http://127.0.0.1:8000/api/services/${id}/`)\r\n-              )\r\n-            );\r\n-            const serviceMap = serviceDetails.reduce((acc, res) => {\r\n-              acc[res.data.id] = res.data;\r\n-              return acc;\r\n-            }, {});\r\n-            setServices(serviceMap);\r\n-          }\r\n+          setVenues(venuesData);\r\n+          setServices(servicesData);\r\n+          setPackages(packagesData);\r\n         } else {\r\n           setError(\"Invalid data format from API.\");\r\n         }\r\n       } catch (error) {\r\n"
                },
                {
                    "date": 1731950095256,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,15 +30,15 @@\n         console.log(\"Planner items fetched:\", response.data); // Add logging here to check response\r\n \r\n         if (Array.isArray(response.data)) {\r\n           const venuesData = response.data.filter(\r\n-            (item) => item.type === \"venue\"\r\n+            (item) => item.venue === \"venue\"\r\n           );\r\n           const servicesData = response.data.filter(\r\n-            (item) => item.type === \"service\"\r\n+            (item) => item.service === \"service\"\r\n           );\r\n           const packagesData = response.data.filter(\r\n-            (item) => item.type === \"package\"\r\n+            (item) => item.package === \"package\"\r\n           );\r\n \r\n           setVenues(venuesData);\r\n           setServices(servicesData);\r\n"
                },
                {
                    "date": 1731950112940,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,18 +56,8 @@\n \r\n     fetchPlannerItems();\r\n   }, []);\r\n \r\n-  // Handle adding to planner (placeholder for actual add functionality)\r\n-  const addToPlanner = async (item, type) => {\r\n-    try {\r\n-      alert(\"Item added to planner\"); // Placeholder action for adding\r\n-    } catch (error) {\r\n-      console.error(\"Error adding item to planner:\", error);\r\n-      setError(\"Failed to add item to planner.\");\r\n-    }\r\n-  };\r\n-\r\n   // Handle removing from planner\r\n   const removeFromPlanner = async (item, type) => {\r\n     try {\r\n       // Placeholder for removing an item; you'd need to implement the API for this\r\n"
                },
                {
                    "date": 1731950264320,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,11 +4,11 @@\n import styles from \"../module_css/PlannerList.module.css\";\r\n \r\n export default function PlannerList() {\r\n   const [plannerItems, setPlannerItems] = useState([]);\r\n-  const [packages, setPackages] = useState({});\r\n-  const [venues, setVenues] = useState({});\r\n-  const [services, setServices] = useState({});\r\n+  const [packages, setPackages] = useState([]);\r\n+  const [venues, setVenues] = useState([]);\r\n+  const [services, setServices] = useState([]);\r\n   const [loading, setLoading] = useState(true);\r\n   const [error, setError] = useState(null);\r\n   const [showVenues, setShowVenues] = useState(false);\r\n   const [showServices, setShowServices] = useState(false);\r\n@@ -26,19 +26,19 @@\n             },\r\n           }\r\n         );\r\n \r\n-        console.log(\"Planner items fetched:\", response.data); // Add logging here to check response\r\n+        console.log(\"Planner items fetched:\", response.data);\r\n \r\n         if (Array.isArray(response.data)) {\r\n           const venuesData = response.data.filter(\r\n-            (item) => item.venue === \"venue\"\r\n+            (item) => item.venue !== null\r\n           );\r\n           const servicesData = response.data.filter(\r\n-            (item) => item.service === \"service\"\r\n+            (item) => item.service !== null\r\n           );\r\n           const packagesData = response.data.filter(\r\n-            (item) => item.package === \"package\"\r\n+            (item) => item.package !== null\r\n           );\r\n \r\n           setVenues(venuesData);\r\n           setServices(servicesData);\r\n@@ -56,8 +56,31 @@\n \r\n     fetchPlannerItems();\r\n   }, []);\r\n \r\n+  // Handle adding to planner\r\n+  const addToPlanner = async (item, type) => {\r\n+    try {\r\n+      const response = await axios.post(\r\n+        \"http://127.0.0.1:8000/api/planner-list/\",\r\n+        {\r\n+          venue: type === \"venue\" ? item.id : null,\r\n+          service: type === \"service\" ? item.id : null,\r\n+          package: type === \"package\" ? item.id : null,\r\n+        },\r\n+        {\r\n+          headers: {\r\n+            Authorization: `Bearer ${localStorage.getItem(\"jwt_token\")}`,\r\n+          },\r\n+        }\r\n+      );\r\n+      console.log(\"Item added to planner:\", response.data);\r\n+    } catch (error) {\r\n+      console.error(\"Error adding item to planner:\", error);\r\n+      setError(\"Failed to add item to planner.\");\r\n+    }\r\n+  };\r\n+\r\n   // Handle removing from planner\r\n   const removeFromPlanner = async (item, type) => {\r\n     try {\r\n       // Placeholder for removing an item; you'd need to implement the API for this\r\n"
                },
                {
                    "date": 1732008547669,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,189 +1,57 @@\n-import React, { useEffect, useState } from \"react\";\r\n import axios from \"axios\";\r\n-import PlannerItemComponent from \"./PlannerItemComponent\"; // Import your PlannerItem component\r\n+import { useEffect, useState } from \"react\";\r\n import styles from \"../module_css/PlannerList.module.css\";\r\n+import PlannerSection from \"./PlannerSection\";\r\n \r\n export default function PlannerList() {\r\n-  const [plannerItems, setPlannerItems] = useState([]);\r\n-  const [packages, setPackages] = useState([]);\r\n-  const [venues, setVenues] = useState([]);\r\n-  const [services, setServices] = useState([]);\r\n-  const [loading, setLoading] = useState(true);\r\n+  const [planners, setPlanners] = useState([]);\r\n+  const [loading, setLoading] = useState(false);\r\n   const [error, setError] = useState(null);\r\n   const [showVenues, setShowVenues] = useState(false);\r\n   const [showServices, setShowServices] = useState(false);\r\n-  const [showPackages, setShowPackages] = useState(false);\r\n \r\n-  // Fetch planner items\r\n   useEffect(() => {\r\n-    const fetchPlannerItems = async () => {\r\n-      try {\r\n-        const response = await axios.get(\r\n-          \"http://127.0.0.1:8000/api/planner-list/\",\r\n-          {\r\n-            headers: {\r\n-              Authorization: `Bearer ${localStorage.getItem(\"jwt_token\")}`,\r\n-            },\r\n-          }\r\n-        );\r\n-\r\n-        console.log(\"Planner items fetched:\", response.data);\r\n-\r\n-        if (Array.isArray(response.data)) {\r\n-          const venuesData = response.data.filter(\r\n-            (item) => item.venue !== null\r\n-          );\r\n-          const servicesData = response.data.filter(\r\n-            (item) => item.service !== null\r\n-          );\r\n-          const packagesData = response.data.filter(\r\n-            (item) => item.package !== null\r\n-          );\r\n-\r\n-          setVenues(venuesData);\r\n-          setServices(servicesData);\r\n-          setPackages(packagesData);\r\n-        } else {\r\n-          setError(\"Invalid data format from API.\");\r\n-        }\r\n-      } catch (error) {\r\n-        console.error(\"Error fetching planner items:\", error);\r\n-        setError(\"Failed to load planner items.\");\r\n-      }\r\n-\r\n-      setLoading(false);\r\n-    };\r\n-\r\n-    fetchPlannerItems();\r\n+    setLoading(true);\r\n+    axios\r\n+      .get(\"http://127.0.0.1:8000/api/planner-list/\")\r\n+      .then((response) => {\r\n+        setPlanners(response.data);\r\n+        setLoading(false);\r\n+      })\r\n+      .catch((error) => {\r\n+        setError(\"Error fetching planner data\");\r\n+        setLoading(false);\r\n+      });\r\n   }, []);\r\n \r\n-  // Handle adding to planner\r\n-  const addToPlanner = async (item, type) => {\r\n-    try {\r\n-      const response = await axios.post(\r\n-        \"http://127.0.0.1:8000/api/planner-list/\",\r\n-        {\r\n-          venue: type === \"venue\" ? item.id : null,\r\n-          service: type === \"service\" ? item.id : null,\r\n-          package: type === \"package\" ? item.id : null,\r\n-        },\r\n-        {\r\n-          headers: {\r\n-            Authorization: `Bearer ${localStorage.getItem(\"jwt_token\")}`,\r\n-          },\r\n-        }\r\n-      );\r\n-      console.log(\"Item added to planner:\", response.data);\r\n-    } catch (error) {\r\n-      console.error(\"Error adding item to planner:\", error);\r\n-      setError(\"Failed to add item to planner.\");\r\n-    }\r\n-  };\r\n+  const venues = planners.filter((item) => item.venue);\r\n+  const services = planners.filter((item) => item.service);\r\n+  const totalItems = venues.length + services.length;\r\n \r\n-  // Handle removing from planner\r\n-  const removeFromPlanner = async (item, type) => {\r\n-    try {\r\n-      // Placeholder for removing an item; you'd need to implement the API for this\r\n-      alert(\"Item removed from planner\");\r\n-    } catch (error) {\r\n-      console.error(\"Error removing from planner:\", error);\r\n-      setError(\"Failed to remove item from planner.\");\r\n-    }\r\n-  };\r\n-\r\n   return (\r\n     <div className={styles.planner_list_container}>\r\n       <h1>Planner List</h1>\r\n+      <p>Total Items: {totalItems}</p>\r\n       {error && <p className={styles.errormessage}>{error}</p>}\r\n-\r\n       {loading ? (\r\n         <p>Loading...</p>\r\n       ) : (\r\n         <>\r\n-          {/* Venue Section */}\r\n-          <div className={styles.section}>\r\n-            <div\r\n-              className={styles.section_header}\r\n-              onClick={() => setShowVenues(!showVenues)}\r\n-            >\r\n-              <h2>Venues</h2>\r\n-              <span className={styles.item_count}>({venues.length})</span>\r\n-            </div>\r\n-            {showVenues && (\r\n-              <div className={styles.section_content}>\r\n-                {venues.length > 0 ? (\r\n-                  venues.map((venueItem) => (\r\n-                    <PlannerItemComponent\r\n-                      key={venueItem.id}\r\n-                      item={venueItem}\r\n-                      type=\"venue\"\r\n-                      onAdd={addToPlanner}\r\n-                      onRemove={removeFromPlanner}\r\n-                    />\r\n-                  ))\r\n-                ) : (\r\n-                  <p>No venues added yet.</p>\r\n-                )}\r\n-              </div>\r\n-            )}\r\n-          </div>\r\n-\r\n-          {/* Service Section */}\r\n-          <div className={styles.section}>\r\n-            <div\r\n-              className={styles.section_header}\r\n-              onClick={() => setShowServices(!showServices)}\r\n-            >\r\n-              <h2>Services</h2>\r\n-              <span className={styles.item_count}>({services.length})</span>\r\n-            </div>\r\n-            {showServices && (\r\n-              <div className={styles.section_content}>\r\n-                {services.length > 0 ? (\r\n-                  services.map((serviceItem) => (\r\n-                    <PlannerItemComponent\r\n-                      key={serviceItem.id}\r\n-                      item={serviceItem}\r\n-                      type=\"service\"\r\n-                      onAdd={addToPlanner}\r\n-                      onRemove={removeFromPlanner}\r\n-                    />\r\n-                  ))\r\n-                ) : (\r\n-                  <p>No services added yet.</p>\r\n-                )}\r\n-              </div>\r\n-            )}\r\n-          </div>\r\n-\r\n-          {/* Package Section */}\r\n-          <div className={styles.section}>\r\n-            <div\r\n-              className={styles.section_header}\r\n-              onClick={() => setShowPackages(!showPackages)}\r\n-            >\r\n-              <h2>Packages</h2>\r\n-              <span className={styles.item_count}>({packages.length})</span>\r\n-            </div>\r\n-            {showPackages && (\r\n-              <div className={styles.section_content}>\r\n-                {packages.length > 0 ? (\r\n-                  packages.map((packageItem) => (\r\n-                    <PlannerItemComponent\r\n-                      key={packageItem.id}\r\n-                      item={packageItem}\r\n-                      type=\"package\"\r\n-                      onAdd={addToPlanner}\r\n-                      onRemove={removeFromPlanner}\r\n-                    />\r\n-                  ))\r\n-                ) : (\r\n-                  <p>No packages added yet.</p>\r\n-                )}\r\n-              </div>\r\n-            )}\r\n-          </div>\r\n+          <PlannerSection\r\n+            title=\"Venues\"\r\n+            items={venues}\r\n+            showItems={showVenues}\r\n+            setShowItems={setShowVenues}\r\n+            isVenue={true}\r\n+          />\r\n+          <PlannerSection\r\n+            title=\"Services\"\r\n+            items={services}\r\n+            showItems={showServices}\r\n+            setShowItems={setShowServices}\r\n+            isVenue={false}\r\n+          />\r\n         </>\r\n       )}\r\n     </div>\r\n   );\r\n"
                },
                {
                    "date": 1732008608133,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n import axios from \"axios\";\r\n import { useEffect, useState } from \"react\";\r\n import styles from \"../module_css/PlannerList.module.css\";\r\n-import PlannerSection from \"./PlannerSection\";\r\n+import PlannerItemCmonent from \"./PlannerItemCmonent\";\r\n \r\n export default function PlannerList() {\r\n   const [planners, setPlanners] = useState([]);\r\n   const [loading, setLoading] = useState(false);\r\n@@ -36,16 +36,16 @@\n       {loading ? (\r\n         <p>Loading...</p>\r\n       ) : (\r\n         <>\r\n-          <PlannerSection\r\n+          <PlannerItemCmonent\r\n             title=\"Venues\"\r\n             items={venues}\r\n             showItems={showVenues}\r\n             setShowItems={setShowVenues}\r\n             isVenue={true}\r\n           />\r\n-          <PlannerSection\r\n+          <PlannerItemCmonent\r\n             title=\"Services\"\r\n             items={services}\r\n             showItems={showServices}\r\n             setShowItems={setShowServices}\r\n"
                },
                {
                    "date": 1732008657804,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n import axios from \"axios\";\r\n import { useEffect, useState } from \"react\";\r\n import styles from \"../module_css/PlannerList.module.css\";\r\n-import PlannerItemCmonent from \"./PlannerItemCmonent\";\r\n+import PlannerItemComponent from \"./PlannerItemComponent\";\r\n \r\n export default function PlannerList() {\r\n   const [planners, setPlanners] = useState([]);\r\n   const [loading, setLoading] = useState(false);\r\n"
                },
                {
                    "date": 1732008773267,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,15 +1,16 @@\n import axios from \"axios\";\r\n import { useEffect, useState } from \"react\";\r\n import styles from \"../module_css/PlannerList.module.css\";\r\n-import PlannerItemComponent from \"./PlannerItemComponent\";\r\n+import PlannerSection from \"./PlannerSection\";\r\n \r\n export default function PlannerList() {\r\n   const [planners, setPlanners] = useState([]);\r\n   const [loading, setLoading] = useState(false);\r\n   const [error, setError] = useState(null);\r\n   const [showVenues, setShowVenues] = useState(false);\r\n   const [showServices, setShowServices] = useState(false);\r\n+  const [showPackages, setShowPackages] = useState(false);\r\n \r\n   useEffect(() => {\r\n     setLoading(true);\r\n     axios\r\n@@ -25,9 +26,10 @@\n   }, []);\r\n \r\n   const venues = planners.filter((item) => item.venue);\r\n   const services = planners.filter((item) => item.service);\r\n-  const totalItems = venues.length + services.length;\r\n+  const packages = planners.filter((item) => item.package); // Assuming 'package' is the key\r\n+  const totalItems = venues.length + services.length + packages.length;\r\n \r\n   return (\r\n     <div className={styles.planner_list_container}>\r\n       <h1>Planner List</h1>\r\n@@ -36,22 +38,29 @@\n       {loading ? (\r\n         <p>Loading...</p>\r\n       ) : (\r\n         <>\r\n-          <PlannerItemCmonent\r\n+          <PlannerSection\r\n             title=\"Venues\"\r\n             items={venues}\r\n             showItems={showVenues}\r\n             setShowItems={setShowVenues}\r\n             isVenue={true}\r\n           />\r\n-          <PlannerItemCmonent\r\n+          <PlannerSection\r\n             title=\"Services\"\r\n             items={services}\r\n             showItems={showServices}\r\n             setShowItems={setShowServices}\r\n             isVenue={false}\r\n           />\r\n+          <PlannerSection\r\n+            title=\"Packages\"\r\n+            items={packages}\r\n+            showItems={showPackages}\r\n+            setShowItems={setShowPackages}\r\n+            isVenue={false} // If the package has a different structure, you may need to modify the `PlannerSection` to handle it\r\n+          />\r\n         </>\r\n       )}\r\n     </div>\r\n   );\r\n"
                },
                {
                    "date": 1732008792756,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n import axios from \"axios\";\r\n import { useEffect, useState } from \"react\";\r\n import styles from \"../module_css/PlannerList.module.css\";\r\n-import PlannerSection from \"./PlannerSection\";\r\n+import PlannerItemComponent from \"./PlannerItemComponent\";\r\n \r\n export default function PlannerList() {\r\n   const [planners, setPlanners] = useState([]);\r\n   const [loading, setLoading] = useState(false);\r\n@@ -38,23 +38,23 @@\n       {loading ? (\r\n         <p>Loading...</p>\r\n       ) : (\r\n         <>\r\n-          <PlannerSection\r\n+          <PlannerItemComponent\r\n             title=\"Venues\"\r\n             items={venues}\r\n             showItems={showVenues}\r\n             setShowItems={setShowVenues}\r\n             isVenue={true}\r\n           />\r\n-          <PlannerSection\r\n+          <PlannerItemComponent\r\n             title=\"Services\"\r\n             items={services}\r\n             showItems={showServices}\r\n             setShowItems={setShowServices}\r\n             isVenue={false}\r\n           />\r\n-          <PlannerSection\r\n+          <PlannerItemComponent\r\n             title=\"Packages\"\r\n             items={packages}\r\n             showItems={showPackages}\r\n             setShowItems={setShowPackages}\r\n"
                },
                {
                    "date": 1732009785969,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,35 +1,34 @@\n import axios from \"axios\";\r\n import { useEffect, useState } from \"react\";\r\n import styles from \"../module_css/PlannerList.module.css\";\r\n-import PlannerItemComponent from \"./PlannerItemComponent\";\r\n \r\n export default function PlannerList() {\r\n   const [planners, setPlanners] = useState([]);\r\n   const [loading, setLoading] = useState(false);\r\n   const [error, setError] = useState(null);\r\n   const [showVenues, setShowVenues] = useState(false);\r\n   const [showServices, setShowServices] = useState(false);\r\n-  const [showPackages, setShowPackages] = useState(false);\r\n \r\n   useEffect(() => {\r\n     setLoading(true);\r\n     axios\r\n       .get(\"http://127.0.0.1:8000/api/planner-list/\")\r\n       .then((response) => {\r\n+        console.log(response.data); // Inspect response data here\r\n         setPlanners(response.data);\r\n         setLoading(false);\r\n       })\r\n       .catch((error) => {\r\n         setError(\"Error fetching planner data\");\r\n+        console.error(error);\r\n         setLoading(false);\r\n       });\r\n   }, []);\r\n \r\n   const venues = planners.filter((item) => item.venue);\r\n   const services = planners.filter((item) => item.service);\r\n-  const packages = planners.filter((item) => item.package); // Assuming 'package' is the key\r\n-  const totalItems = venues.length + services.length + packages.length;\r\n+  const totalItems = venues.length + services.length;\r\n \r\n   return (\r\n     <div className={styles.planner_list_container}>\r\n       <h1>Planner List</h1>\r\n@@ -38,29 +37,78 @@\n       {loading ? (\r\n         <p>Loading...</p>\r\n       ) : (\r\n         <>\r\n-          <PlannerItemComponent\r\n-            title=\"Venues\"\r\n-            items={venues}\r\n-            showItems={showVenues}\r\n-            setShowItems={setShowVenues}\r\n-            isVenue={true}\r\n-          />\r\n-          <PlannerItemComponent\r\n-            title=\"Services\"\r\n-            items={services}\r\n-            showItems={showServices}\r\n-            setShowItems={setShowServices}\r\n-            isVenue={false}\r\n-          />\r\n-          <PlannerItemComponent\r\n-            title=\"Packages\"\r\n-            items={packages}\r\n-            showItems={showPackages}\r\n-            setShowItems={setShowPackages}\r\n-            isVenue={false} // If the package has a different structure, you may need to modify the `PlannerSection` to handle it\r\n-          />\r\n+          {/* Venue Section */}\r\n+          <div className={styles.section}>\r\n+            <div\r\n+              className={styles.section_header}\r\n+              onClick={() => setShowVenues(!showVenues)}\r\n+            >\r\n+              <h2>Venues</h2>\r\n+              <span className={styles.item_count}>({venues.length})</span>\r\n+            </div>\r\n+            {showVenues && (\r\n+              <div className={styles.section_content}>\r\n+                {venues.map((venueItem) => (\r\n+                  <div key={venueItem.id} className={styles.planner_card}>\r\n+                    <img\r\n+                      src={`http://127.0.0.1:8000${venueItem.venue.Poster}`}\r\n+                      alt=\"Venue Poster\"\r\n+                      className={styles.planner_image}\r\n+                    />\r\n+                    <div className={styles.planner_details}>\r\n+                      <h3>{venueItem.venue.Name}</h3>\r\n+                      <p>Location: {venueItem.venue.Location}</p>\r\n+                      <p>Booking Price: ${venueItem.venue.Booking_price}</p>\r\n+                      <p>Capacity: {venueItem.venue.Capacity}</p>\r\n+                      <p>Parking: {venueItem.venue.Parking ? \"Yes\" : \"No\"}</p>\r\n+                      <div className={styles.btndiv}>\r\n+                        <button className={styles.btn}>\r\n+                          <i class=\"bi bi-trash3-fill\"></i>\r\n+                        </button>\r\n+                      </div>\r\n+                    </div>\r\n+                  </div>\r\n+                ))}\r\n+              </div>\r\n+            )}\r\n+          </div>\r\n+\r\n+          {/* Service Section */}\r\n+          <div className={styles.section}>\r\n+            <div\r\n+              className={styles.section_header}\r\n+              onClick={() => setShowServices(!showServices)}\r\n+            >\r\n+              <h2>Services</h2>\r\n+              <span className={styles.item_count}>({services.length})</span>\r\n+            </div>\r\n+            {showServices && (\r\n+              <div className={styles.section_content}>\r\n+                {services.map((serviceItem) => (\r\n+                  <div key={serviceItem.id} className={styles.planner_card}>\r\n+                    <img\r\n+                      src={`http://127.0.0.1:8000${serviceItem.service.poster}`}\r\n+                      alt=\"Service Poster\"\r\n+                      className={styles.planner_image}\r\n+                    />\r\n+                    <div className={styles.planner_details}>\r\n+                      <h3>{serviceItem.service.Name}</h3>\r\n+                      <p>Type: {serviceItem.service.Type}</p>\r\n+                      <p>Description: {serviceItem.service.Description}</p>\r\n+                      <p>Price: ${serviceItem.service.Price}</p>\r\n+                      <div className={styles.btndiv}>\r\n+                        <button className={styles.btn}>\r\n+                          <i class=\"bi bi-trash3-fill\"></i>\r\n+                        </button>\r\n+                      </div>\r\n+                    </div>\r\n+                  </div>\r\n+                ))}\r\n+              </div>\r\n+            )}\r\n+          </div>\r\n         </>\r\n       )}\r\n     </div>\r\n   );\r\n"
                },
                {
                    "date": 1732009806972,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -107,8 +107,43 @@\n                 ))}\r\n               </div>\r\n             )}\r\n           </div>\r\n+\r\n+          {/* Service Section */}\r\n+          <div className={styles.section}>\r\n+            <div\r\n+              className={styles.section_header}\r\n+              onClick={() => setShowServices(!showServices)}\r\n+            >\r\n+              <h2>Services</h2>\r\n+              <span className={styles.item_count}>({services.length})</span>\r\n+            </div>\r\n+            {showServices && (\r\n+              <div className={styles.section_content}>\r\n+                {services.map((serviceItem) => (\r\n+                  <div key={serviceItem.id} className={styles.planner_card}>\r\n+                    <img\r\n+                      src={`http://127.0.0.1:8000${serviceItem.service.poster}`}\r\n+                      alt=\"Service Poster\"\r\n+                      className={styles.planner_image}\r\n+                    />\r\n+                    <div className={styles.planner_details}>\r\n+                      <h3>{serviceItem.service.Name}</h3>\r\n+                      <p>Type: {serviceItem.service.Type}</p>\r\n+                      <p>Description: {serviceItem.service.Description}</p>\r\n+                      <p>Price: ${serviceItem.service.Price}</p>\r\n+                      <div className={styles.btndiv}>\r\n+                        <button className={styles.btn}>\r\n+                          <i class=\"bi bi-trash3-fill\"></i>\r\n+                        </button>\r\n+                      </div>\r\n+                    </div>\r\n+                  </div>\r\n+                ))}\r\n+              </div>\r\n+            )}\r\n+          </div>\r\n         </>\r\n       )}\r\n     </div>\r\n   );\r\n"
                },
                {
                    "date": 1732009886750,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -108,31 +108,31 @@\n               </div>\r\n             )}\r\n           </div>\r\n \r\n-          {/* Service Section */}\r\n+          {/* package Section */}\r\n           <div className={styles.section}>\r\n             <div\r\n               className={styles.section_header}\r\n               onClick={() => setShowServices(!showServices)}\r\n             >\r\n               <h2>Services</h2>\r\n               <span className={styles.item_count}>({services.length})</span>\r\n             </div>\r\n-            {showServices && (\r\n+            {showPackage && (\r\n               <div className={styles.section_content}>\r\n-                {services.map((serviceItem) => (\r\n-                  <div key={serviceItem.id} className={styles.planner_card}>\r\n+                {pkg.map((pkgItem) => (\r\n+                  <div key={pkgItem.id} className={styles.planner_card}>\r\n                     <img\r\n-                      src={`http://127.0.0.1:8000${serviceItem.service.poster}`}\r\n+                      src={`http://127.0.0.1:8000${pkgItem.pkg.poster}`}\r\n                       alt=\"Service Poster\"\r\n                       className={styles.planner_image}\r\n                     />\r\n                     <div className={styles.planner_details}>\r\n-                      <h3>{serviceItem.service.Name}</h3>\r\n-                      <p>Type: {serviceItem.service.Type}</p>\r\n-                      <p>Description: {serviceItem.service.Description}</p>\r\n-                      <p>Price: ${serviceItem.service.Price}</p>\r\n+                      <h3>{pkgItem.service.Name}</h3>\r\n+                      <p>Type: {pkgItem.service.Type}</p>\r\n+                      <p>Description: {pkgItem.service.Description}</p>\r\n+                      <p>Price: ${pkgItem.service.Price}</p>\r\n                       <div className={styles.btndiv}>\r\n                         <button className={styles.btn}>\r\n                           <i class=\"bi bi-trash3-fill\"></i>\r\n                         </button>\r\n"
                },
                {
                    "date": 1732009902880,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,8 +26,9 @@\n   }, []);\r\n \r\n   const venues = planners.filter((item) => item.venue);\r\n   const services = planners.filter((item) => item.service);\r\n+  const pkgs = planners.filter((item) => item.pkgs);\r\n   const totalItems = venues.length + services.length;\r\n \r\n   return (\r\n     <div className={styles.planner_list_container}>\r\n"
                },
                {
                    "date": 1732009965197,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,9 @@\n \r\n   const venues = planners.filter((item) => item.venue);\r\n   const services = planners.filter((item) => item.service);\r\n   const pkgs = planners.filter((item) => item.pkgs);\r\n-  const totalItems = venues.length + services.length;\r\n+  const totalItems = venues.length + services.length + pkgs.length;\r\n \r\n   return (\r\n     <div className={styles.planner_list_container}>\r\n       <h1>Planner List</h1>\r\n@@ -64,9 +64,9 @@\n                       <p>Capacity: {venueItem.venue.Capacity}</p>\r\n                       <p>Parking: {venueItem.venue.Parking ? \"Yes\" : \"No\"}</p>\r\n                       <div className={styles.btndiv}>\r\n                         <button className={styles.btn}>\r\n-                          <i class=\"bi bi-trash3-fill\"></i>\r\n+                          <i className=\"bi bi-trash3-fill\"></i>\r\n                         </button>\r\n                       </div>\r\n                     </div>\r\n                   </div>\r\n@@ -99,9 +99,9 @@\n                       <p>Description: {serviceItem.service.Description}</p>\r\n                       <p>Price: ${serviceItem.service.Price}</p>\r\n                       <div className={styles.btndiv}>\r\n                         <button className={styles.btn}>\r\n-                          <i class=\"bi bi-trash3-fill\"></i>\r\n+                          <i className=\"bi bi-trash3-fill\"></i>\r\n                         </button>\r\n                       </div>\r\n                     </div>\r\n                   </div>\r\n@@ -109,34 +109,34 @@\n               </div>\r\n             )}\r\n           </div>\r\n \r\n-          {/* package Section */}\r\n+          {/* Package Section */}\r\n           <div className={styles.section}>\r\n             <div\r\n               className={styles.section_header}\r\n-              onClick={() => setShowServices(!showServices)}\r\n+              onClick={() => setShowServices(!showServices)} // This should toggle the package section too\r\n             >\r\n-              <h2>Services</h2>\r\n-              <span className={styles.item_count}>({services.length})</span>\r\n+              <h2>Packages</h2>\r\n+              <span className={styles.item_count}>({pkgs.length})</span>\r\n             </div>\r\n-            {showPackage && (\r\n+            {showServices && ( // Same `showServices` state is being reused, should change to `showPackages` if needed\r\n               <div className={styles.section_content}>\r\n-                {pkg.map((pkgItem) => (\r\n+                {pkgs.map((pkgItem) => (\r\n                   <div key={pkgItem.id} className={styles.planner_card}>\r\n                     <img\r\n                       src={`http://127.0.0.1:8000${pkgItem.pkg.poster}`}\r\n-                      alt=\"Service Poster\"\r\n+                      alt=\"Package Poster\"\r\n                       className={styles.planner_image}\r\n                     />\r\n                     <div className={styles.planner_details}>\r\n-                      <h3>{pkgItem.service.Name}</h3>\r\n-                      <p>Type: {pkgItem.service.Type}</p>\r\n-                      <p>Description: {pkgItem.service.Description}</p>\r\n-                      <p>Price: ${pkgItem.service.Price}</p>\r\n+                      <h3>{pkgItem.pkg.Name}</h3>\r\n+                      <p>Type: {pkgItem.pkg.Type}</p>\r\n+                      <p>Description: {pkgItem.pkg.Description}</p>\r\n+                      <p>Price: ${pkgItem.pkg.Price}</p>\r\n                       <div className={styles.btndiv}>\r\n                         <button className={styles.btn}>\r\n-                          <i class=\"bi bi-trash3-fill\"></i>\r\n+                          <i className=\"bi bi-trash3-fill\"></i>\r\n                         </button>\r\n                       </div>\r\n                     </div>\r\n                   </div>\r\n"
                },
                {
                    "date": 1732010118136,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,8 +7,9 @@\n   const [loading, setLoading] = useState(false);\r\n   const [error, setError] = useState(null);\r\n   const [showVenues, setShowVenues] = useState(false);\r\n   const [showServices, setShowServices] = useState(false);\r\n+  const [showPackages, setShowPackages] = useState(false); // Add state for packages\r\n \r\n   useEffect(() => {\r\n     setLoading(true);\r\n     axios\r\n@@ -24,11 +25,12 @@\n         setLoading(false);\r\n       });\r\n   }, []);\r\n \r\n+  // Filtering planners\r\n   const venues = planners.filter((item) => item.venue);\r\n   const services = planners.filter((item) => item.service);\r\n-  const pkgs = planners.filter((item) => item.pkgs);\r\n+  const pkgs = planners.filter((item) => item.package); // Changed to filter by package\r\n   const totalItems = venues.length + services.length + pkgs.length;\r\n \r\n   return (\r\n     <div className={styles.planner_list_container}>\r\n@@ -113,27 +115,26 @@\n           {/* Package Section */}\r\n           <div className={styles.section}>\r\n             <div\r\n               className={styles.section_header}\r\n-              onClick={() => setShowServices(!showServices)} // This should toggle the package section too\r\n+              onClick={() => setShowPackages(!showPackages)} // Toggle showPackages\r\n             >\r\n               <h2>Packages</h2>\r\n               <span className={styles.item_count}>({pkgs.length})</span>\r\n             </div>\r\n-            {showServices && ( // Same `showServices` state is being reused, should change to `showPackages` if needed\r\n+            {showPackages && (\r\n               <div className={styles.section_content}>\r\n                 {pkgs.map((pkgItem) => (\r\n                   <div key={pkgItem.id} className={styles.planner_card}>\r\n                     <img\r\n-                      src={`http://127.0.0.1:8000${pkgItem.pkg.poster}`}\r\n+                      src={`http://127.0.0.1:8000${pkgItem.package.poster}`}\r\n                       alt=\"Package Poster\"\r\n                       className={styles.planner_image}\r\n                     />\r\n                     <div className={styles.planner_details}>\r\n-                      <h3>{pkgItem.pkg.Name}</h3>\r\n-                      <p>Type: {pkgItem.pkg.Type}</p>\r\n-                      <p>Description: {pkgItem.pkg.Description}</p>\r\n-                      <p>Price: ${pkgItem.pkg.Price}</p>\r\n+                      <h3>{pkgItem.package.Name}</h3>\r\n+                      <p>Description: {pkgItem.package.Description}</p>\r\n+                      <p>Price: ${pkgItem.package.Price}</p>\r\n                       <div className={styles.btndiv}>\r\n                         <button className={styles.btn}>\r\n                           <i className=\"bi bi-trash3-fill\"></i>\r\n                         </button>\r\n"
                }
            ],
            "date": 1731945356785,
            "name": "Commit-0",
            "content": "import React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport PlannerItemComponent from \"./PlannerItemComponent\"; // Import your PlannerItem component\r\nimport styles from \"../module_css/PlannerList.module.css\";\r\n\r\nexport default function PlannerList() {\r\n  const [planners, setPlanners] = useState({\r\n    venues: [],\r\n    services: [],\r\n    packages: [],\r\n  });\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const [showVenues, setShowVenues] = useState(false);\r\n  const [showServices, setShowServices] = useState(false);\r\n  const [showPackages, setShowPackages] = useState(false);\r\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n\r\n  // Effect hook to determine if the user is authenticated and load data\r\n  useEffect(() => {\r\n    const token = localStorage.getItem(\"access_token\");\r\n\r\n    if (token) {\r\n      setIsAuthenticated(true);\r\n      fetchPlannerDataFromBackend(token); // Fetch from backend if user is logged in\r\n    } else {\r\n      loadPlannerDataFromLocalStorage(); // Use localStorage if user is not logged in\r\n    }\r\n  }, []);\r\n\r\n  // Fetch planner data from backend if the user is authenticated\r\n  const fetchPlannerDataFromBackend = (token) => {\r\n    setLoading(true);\r\n    axios\r\n      .get(\"http://127.0.0.1:8000/api/planner-list/\", {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n        withCredentials: true,\r\n      })\r\n      .then((response) => {\r\n        setPlanners({\r\n          venues: response.data.venues,\r\n          services: response.data.services,\r\n          packages: response.data.packages,\r\n        });\r\n        setLoading(false);\r\n      })\r\n      .catch((error) => {\r\n        setError(\"Error fetching planner data\");\r\n        console.error(error);\r\n        setLoading(false);\r\n      });\r\n  };\r\n\r\n  // Load planner data from localStorage if the user is not authenticated\r\n  const loadPlannerDataFromLocalStorage = () => {\r\n    const storedPlanners = JSON.parse(localStorage.getItem(\"plannerList\")) || {\r\n      venues: [],\r\n      services: [],\r\n      packages: [],\r\n    };\r\n    setPlanners(storedPlanners);\r\n  };\r\n\r\n  const addToPlanner = (item, type) => {\r\n    let updatedPlanners = { ...planners };\r\n\r\n    // Dynamically add items based on the type\r\n    if (type === \"venues\") {\r\n      updatedPlanners.venues.push(item);\r\n    } else if (type === \"services\") {\r\n      updatedPlanners.services.push(item);\r\n    } else if (type === \"packages\") {\r\n      updatedPlanners.packages.push(item);\r\n    }\r\n\r\n    setPlanners(updatedPlanners);\r\n    localStorage.setItem(\"plannerList\", JSON.stringify(updatedPlanners));\r\n\r\n    if (isAuthenticated) {\r\n      const token = localStorage.getItem(\"access_token\");\r\n\r\n      // Send only relevant ID based on type\r\n      axios.post(\r\n        \"http://127.0.0.1:8000/api/planner-list/\",\r\n        {\r\n          venue: type === \"venues\" ? item.id : null,\r\n          service: type === \"services\" ? item.id : null,\r\n          package: type === \"packages\" ? item.id : null,\r\n        },\r\n        { headers: { Authorization: `Bearer ${token}` } }\r\n      );\r\n    }\r\n  };\r\n\r\n  const removeFromPlanner = (itemId, type) => {\r\n    const updatedPlanners = { ...planners };\r\n    updatedPlanners[type] = updatedPlanners[type].filter(\r\n      (item) => item.id !== itemId\r\n    );\r\n\r\n    setPlanners(updatedPlanners);\r\n    localStorage.setItem(\"plannerList\", JSON.stringify(updatedPlanners));\r\n\r\n    if (isAuthenticated) {\r\n      const token = localStorage.getItem(\"access_token\");\r\n      axios.delete(`http://127.0.0.1:8000/api/planner-list/${itemId}/`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      });\r\n    }\r\n  };\r\n\r\n  const { venues, services, packages } = planners;\r\n  const totalItems = venues.length + services.length + packages.length;\r\n\r\n  return (\r\n    <div className={styles.planner_list_container}>\r\n      <h1>Planner List</h1>\r\n      <p>Total Items: {totalItems}</p>\r\n      {error && <p className={styles.errormessage}>{error}</p>}\r\n      {loading ? (\r\n        <p>Loading...</p>\r\n      ) : (\r\n        <>\r\n          {/* Venue Section */}\r\n          <div className={styles.section}>\r\n            <div\r\n              className={styles.section_header}\r\n              onClick={() => setShowVenues(!showVenues)}\r\n            >\r\n              <h2>Venues</h2>\r\n              <span className={styles.item_count}>({venues.length})</span>\r\n            </div>\r\n            {showVenues && (\r\n              <div className={styles.section_content}>\r\n                {venues.map((venueItem) => (\r\n                  <PlannerItemComponent\r\n                    key={venueItem.id}\r\n                    item={venueItem}\r\n                    type=\"venues\"\r\n                    onAdd={addToPlanner}\r\n                    onRemove={removeFromPlanner}\r\n                  />\r\n                ))}\r\n              </div>\r\n            )}\r\n          </div>\r\n\r\n          {/* Service Section */}\r\n          <div className={styles.section}>\r\n            <div\r\n              className={styles.section_header}\r\n              onClick={() => setShowServices(!showServices)}\r\n            >\r\n              <h2>Services</h2>\r\n              <span className={styles.item_count}>({services.length})</span>\r\n            </div>\r\n            {showServices && (\r\n              <div className={styles.section_content}>\r\n                {services.map((serviceItem) => (\r\n                  <PlannerItemComponent\r\n                    key={serviceItem.id}\r\n                    item={serviceItem}\r\n                    type=\"services\"\r\n                    onAdd={addToPlanner}\r\n                    onRemove={removeFromPlanner}\r\n                  />\r\n                ))}\r\n              </div>\r\n            )}\r\n          </div>\r\n\r\n          {/* Package Section */}\r\n          <div className={styles.section}>\r\n            <div\r\n              className={styles.section_header}\r\n              onClick={() => setShowPackages(!showPackages)}\r\n            >\r\n              <h2>Packages</h2>\r\n              <span className={styles.item_count}>({packages.length})</span>\r\n            </div>\r\n            {showPackages && (\r\n              <div className={styles.section_content}>\r\n                {packages.map((packageItem) => (\r\n                  <PlannerItemComponent\r\n                    key={packageItem.id}\r\n                    item={packageItem}\r\n                    type=\"packages\"\r\n                    onAdd={addToPlanner}\r\n                    onRemove={removeFromPlanner}\r\n                  />\r\n                ))}\r\n              </div>\r\n            )}\r\n          </div>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n"
        }
    ]
}