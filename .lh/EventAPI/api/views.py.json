{
    "sourceFile": "EventAPI/api/views.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 42,
            "patches": [
                {
                    "date": 1731427175663,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1731427194774,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -88,5 +88,4 @@\n         packages = Package.objects.all()\r\n         serializer = PackageSerializer(packages, many=True)\r\n         return Response(serializer.data)\r\n     \r\n-    pass\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731926729257,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,12 +3,17 @@\n from rest_framework.decorators import api_view\r\n \r\n from rest_framework.views import APIView\r\n from rest_framework import generics, status\r\n-from .models import Venue,Service,OurWork,Package\r\n-from .serializer import VenueSerializer, ServiceSerializer ,OurWorkSerializer, PackageSerializer\r\n+from .models import Venue,Service,OurWork,Package,PlannerList\r\n+from .serializer import VenueSerializer, ServiceSerializer ,OurWorkSerializer, PackageSerializer,PlannerListSerializer\r\n+   \r\n+from rest_framework.parsers import MultiPartParser, FormParser\r\n+from rest_framework.permissions import IsAuthenticatedOrReadOnly\r\n+from django.contrib.sessions.models import Session\r\n \r\n \r\n+\r\n @api_view(['GET'])\r\n def sample_view(request):\r\n     data = {\"message\": \"Hello from Django\"}\r\n     return Response(data)\r\n@@ -88,4 +93,191 @@\n         packages = Package.objects.all()\r\n         serializer = PackageSerializer(packages, many=True)\r\n         return Response(serializer.data)\r\n     \r\n+\r\n+class PackageCreateView(APIView):\r\n+    parser_classes = [MultiPartParser, FormParser]  # To handle file uploads\r\n+\r\n+    def post(self, request, *args, **kwargs):\r\n+        serializer = PackageSerializer(data=request.data)\r\n+        \r\n+        if serializer.is_valid():\r\n+            # Save the package instance\r\n+            package = serializer.save()\r\n+\r\n+            # Add services to the package (ManyToMany field)\r\n+            service_ids = request.data.getlist('services[]')\r\n+            services = Service.objects.filter(id__in=service_ids)\r\n+            package.services.set(services)\r\n+\r\n+            return Response(serializer.data, status=status.HTTP_201_CREATED)\r\n+        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\r\n+    \r\n+\r\n+    def get(self,request,format=None):\r\n+        planners = PlannerList.objects.all()\r\n+        serializer=PlannerListSerializer(planners,many=True)\r\n+        return Response(serializer.data)\r\n+    \r\n+    \r\n+from django.contrib.auth import authenticate, login as auth_login\r\n+from rest_framework.views import APIView\r\n+from rest_framework.response import Response\r\n+from rest_framework import status\r\n+\r\n+class loginView(APIView):\r\n+    def post(self, request):\r\n+        username = request.data.get('username')\r\n+        password = request.data.get('password')\r\n+        user = authenticate(username=username, password=password)\r\n+\r\n+        if user is not None:\r\n+            profile = user.profile  # Assuming you have a one-to-one relationship between User and Profile\r\n+            if profile.is_approved.lower() == 'true':\r\n+                auth_login(request, user)\r\n+                return Response({\"message\": \"Login successful\"}, status=status.HTTP_200_OK)\r\n+            else:\r\n+                return Response({\"message\": \"Your account is not approved yet.\"}, status=status.HTTP_403_FORBIDDEN)\r\n+        else:\r\n+            return Response({\"message\": \"Invalid credentials\"}, status=status.HTTP_400_BAD_REQUEST)\r\n+\r\n+    \r\n+import uuid\r\n+    \r\n+# class AddToPlannerView(APIView):\r\n+#     def post(self, request):\r\n+#         item_type = request.data.get('item_type')\r\n+#         item_id = request.data.get('item_id')\r\n+#         user = request.user if request.user.is_authenticated else None\r\n+#         session_id = request.data.get('session_id', str(uuid.uuid4()))  # Generate a new session ID for anonymous users\r\n+\r\n+#         if not item_type or not item_id:\r\n+#             return Response({\"message\": \"Item type and item ID are required\"}, status=400)\r\n+\r\n+#         item = None\r\n+#         if item_type == 'venue':\r\n+#             item = Venue.objects.filter(id=item_id).first()\r\n+#         elif item_type == 'service':\r\n+#             item = Service.objects.filter(id=item_id).first()\r\n+#         elif item_type == 'package':\r\n+#             item = Package.objects.filter(id=item_id).first()\r\n+#         else:\r\n+#             return Response({\"message\": \"Invalid item type\"}, status=400)\r\n+\r\n+#         if not item:\r\n+#             return Response({\"message\": f\"{item_type.capitalize()} with the given ID not found\"}, status=404)\r\n+\r\n+#         # Create a PlannerList entry\r\n+#         planner_item = PlannerList(\r\n+#             venue=item if isinstance(item, Venue) else None,\r\n+#             service=item if isinstance(item, Service) else None,\r\n+#             package=item if isinstance(item, Package) else None,\r\n+#             user=user,\r\n+#             session_id=session_id\r\n+#         )\r\n+#         planner_item.save()\r\n+\r\n+#         return Response({\"message\": f\"{item_type.capitalize()} added to your planner\"}, status=201)\r\n+\r\n+\r\n+\r\n+# class PlannerListView(APIView):\r\n+#     def get(self,request,format=None):\r\n+#         planners = PlannerList.objects.all()\r\n+#         serializer=PlannerListSerializer(planners,many=True)\r\n+#         return Response(serializer.data)\r\n+\r\n+\r\n+\r\n+\r\n+class PlannerListView(APIView):\r\n+    \"\"\"\r\n+    View to list all planners, including venues, services, and packages.\r\n+    \"\"\"\r\n+    def get(self, request, format=None):\r\n+        # Filter planner list based on logged-in user or session ID\r\n+        user = request.user if request.user.is_authenticated else None\r\n+        session_id = request.GET.get(\"session_id\")\r\n+\r\n+        if user:\r\n+            planners = PlannerList.objects.filter(user=user)\r\n+        elif session_id:\r\n+            planners = PlannerList.objects.filter(session_id=session_id)\r\n+        else:\r\n+            planners = PlannerList.objects.none()\r\n+\r\n+        # Serialize planner list\r\n+        serializer = PlannerListSerializer(planners, many=True)\r\n+        return Response(serializer.data)\r\n+    \r\n+    \r\n+    \r\n+    \r\n+    \r\n+    \r\n+    \r\n+    \r\n+    \r\n+    \r\n+    \r\n+    \r\n+    \r\n+    \r\n+    \r\n+    \r\n+    \r\n+    \r\n+    \r\n+    \r\n+    \r\n+    \r\n+    \r\n+    \r\n+    \r\n+    \r\n+    \r\n+    \r\n+    \r\n+    from rest_framework.permissions import IsAuthenticated\r\n+from rest_framework.response import Response\r\n+from rest_framework.views import APIView\r\n+from .models import Venue, Service, Package, PlannerList\r\n+from django.contrib.auth.models import User\r\n+\r\n+class AddToPlannerView(APIView):\r\n+    permission_classes = [IsAuthenticated]  # Ensure only authenticated users can add to planner\r\n+\r\n+    def post(self, request):\r\n+        item_type = request.data.get(\"item_type\")\r\n+        item_id = request.data.get(\"item_id\")\r\n+        \r\n+        # Validate item_type and item_id\r\n+        if not item_type or not item_id:\r\n+            return Response({\"message\": \"Item type and item ID are required\"}, status=400)\r\n+\r\n+        # Fetch the item based on item_type\r\n+        if item_type == \"venue\":\r\n+            item = Venue.objects.get(id=item_id)\r\n+        elif item_type == \"service\":\r\n+            item = Service.objects.get(id=item_id)\r\n+        elif item_type == \"package\":\r\n+            item = Package.objects.get(id=item_id)\r\n+        else:\r\n+            return Response({\"message\": \"Invalid item type\"}, status=400)\r\n+\r\n+        # Add the item to the planner\r\n+        planner_item = PlannerList(\r\n+            user=request.user,  # The authenticated user\r\n+            session_id=request.session.session_key,  # For anonymous users, if any\r\n+        )\r\n+        \r\n+        if item_type == \"venue\":\r\n+            planner_item.venue = item\r\n+        elif item_type == \"service\":\r\n+            planner_item.service = item\r\n+        elif item_type == \"package\":\r\n+            planner_item.package = item\r\n+        \r\n+        planner_item.save()\r\n+\r\n+        return Response({\"message\": \"Item added to planner successfully\"})\r\n"
                },
                {
                    "date": 1731926737279,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -237,9 +237,9 @@\n     \r\n     \r\n     \r\n     \r\n-    from rest_framework.permissions import IsAuthenticated\r\n+from rest_framework.permissions import IsAuthenticated\r\n from rest_framework.response import Response\r\n from rest_framework.views import APIView\r\n from .models import Venue, Service, Package, PlannerList\r\n from django.contrib.auth.models import User\r\n"
                },
                {
                    "date": 1731927214638,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -244,11 +244,15 @@\n from .models import Venue, Service, Package, PlannerList\r\n from django.contrib.auth.models import User\r\n \r\n class AddToPlannerView(APIView):\r\n+    \r\n     permission_classes = [IsAuthenticated]  # Ensure only authenticated users can add to planner\r\n \r\n     def post(self, request):\r\n+            # Print the username of the authenticated user\r\n+        print(f\"Logged-in user: {request.user.username}\")\r\n+\r\n         item_type = request.data.get(\"item_type\")\r\n         item_id = request.data.get(\"item_id\")\r\n         \r\n         # Validate item_type and item_id\r\n"
                },
                {
                    "date": 1731927220487,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -245,9 +245,9 @@\n from django.contrib.auth.models import User\r\n \r\n class AddToPlannerView(APIView):\r\n     \r\n-    permission_classes = [IsAuthenticated]  # Ensure only authenticated users can add to planner\r\n+    # permission_classes = [IsAuthenticated]  # Ensure only authenticated users can add to planner\r\n \r\n     def post(self, request):\r\n             # Print the username of the authenticated user\r\n         print(f\"Logged-in user: {request.user.username}\")\r\n"
                },
                {
                    "date": 1731927285755,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -234,54 +234,35 @@\n     \r\n     \r\n     \r\n     \r\n-    \r\n-    \r\n-    \r\n+    from rest_framework.response import Response\r\n+from rest_framework.views import APIView\r\n from rest_framework.permissions import IsAuthenticated\r\n-from rest_framework.response import Response\r\n-from rest_framework.views import APIView\r\n-from .models import Venue, Service, Package, PlannerList\r\n-from django.contrib.auth.models import User\r\n+from .models import PlannerList\r\n \r\n class AddToPlannerView(APIView):\r\n-    \r\n-    # permission_classes = [IsAuthenticated]  # Ensure only authenticated users can add to planner\r\n+    # permission_classes = [IsAuthenticated]\r\n \r\n     def post(self, request):\r\n-            # Print the username of the authenticated user\r\n-        print(f\"Logged-in user: {request.user.username}\")\r\n+        # Check if the user is authenticated\r\n+        if request.user.is_authenticated:\r\n+            # If authenticated, print the username\r\n+            print(f\"Logged-in user: {request.user.username}\")\r\n \r\n-        item_type = request.data.get(\"item_type\")\r\n-        item_id = request.data.get(\"item_id\")\r\n-        \r\n-        # Validate item_type and item_id\r\n-        if not item_type or not item_id:\r\n-            return Response({\"message\": \"Item type and item ID are required\"}, status=400)\r\n+            # Add to the planner list\r\n+            item_type = request.data.get('item_type')\r\n+            item_id = request.data.get('item_id')\r\n+            \r\n+            planner_item = PlannerList(\r\n+                user=request.user,  # The authenticated user\r\n+                session_id=request.session.session_key,  # For anonymous users, if any\r\n+                item_type=item_type,\r\n+                item_id=item_id\r\n+            )\r\n \r\n-        # Fetch the item based on item_type\r\n-        if item_type == \"venue\":\r\n-            item = Venue.objects.get(id=item_id)\r\n-        elif item_type == \"service\":\r\n-            item = Service.objects.get(id=item_id)\r\n-        elif item_type == \"package\":\r\n-            item = Package.objects.get(id=item_id)\r\n+            # Save the planner item\r\n+            planner_item.save()\r\n+            return Response({\"message\": \"Item added to planner successfully\"})\r\n         else:\r\n-            return Response({\"message\": \"Invalid item type\"}, status=400)\r\n-\r\n-        # Add the item to the planner\r\n-        planner_item = PlannerList(\r\n-            user=request.user,  # The authenticated user\r\n-            session_id=request.session.session_key,  # For anonymous users, if any\r\n-        )\r\n-        \r\n-        if item_type == \"venue\":\r\n-            planner_item.venue = item\r\n-        elif item_type == \"service\":\r\n-            planner_item.service = item\r\n-        elif item_type == \"package\":\r\n-            planner_item.package = item\r\n-        \r\n-        planner_item.save()\r\n-\r\n-        return Response({\"message\": \"Item added to planner successfully\"})\r\n+            print(\"User is not authenticated\")\r\n+            return Response({\"message\": \"You must be logged in to add items to the planner.\"}, status=403)\r\n"
                },
                {
                    "date": 1731927301009,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -240,9 +240,9 @@\n from rest_framework.permissions import IsAuthenticated\r\n from .models import PlannerList\r\n \r\n class AddToPlannerView(APIView):\r\n-    # permission_classes = [IsAuthenticated]\r\n+    permission_classes = [IsAuthenticated]\r\n \r\n     def post(self, request):\r\n         # Check if the user is authenticated\r\n         if request.user.is_authenticated:\r\n"
                },
                {
                    "date": 1731927386934,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -244,11 +244,11 @@\n     permission_classes = [IsAuthenticated]\r\n \r\n     def post(self, request):\r\n         # Check if the user is authenticated\r\n+            # If authenticated, print the username\r\n+        print(f\"Logged-in user: {request.user.username}\")\r\n         if request.user.is_authenticated:\r\n-            # If authenticated, print the username\r\n-            print(f\"Logged-in user: {request.user.username}\")\r\n \r\n             # Add to the planner list\r\n             item_type = request.data.get('item_type')\r\n             item_id = request.data.get('item_id')\r\n"
                },
                {
                    "date": 1731927405503,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -240,9 +240,9 @@\n from rest_framework.permissions import IsAuthenticated\r\n from .models import PlannerList\r\n \r\n class AddToPlannerView(APIView):\r\n-    permission_classes = [IsAuthenticated]\r\n+    # permission_classes = [IsAuthenticated]\r\n \r\n     def post(self, request):\r\n         # Check if the user is authenticated\r\n             # If authenticated, print the username\r\n"
                },
                {
                    "date": 1731928179286,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -233,36 +233,41 @@\n     \r\n     \r\n     \r\n     \r\n-    \r\n-    from rest_framework.response import Response\r\n-from rest_framework.views import APIView\r\n+    from rest_framework.decorators import api_view\r\n+from rest_framework.response import Response\r\n from rest_framework.permissions import IsAuthenticated\r\n-from .models import PlannerList\r\n+from .models import PlannerList, Venue, Service, Package\r\n \r\n-class AddToPlannerView(APIView):\r\n-    # permission_classes = [IsAuthenticated]\r\n+@api_view(['POST'])\r\n+def add_to_planner(request):\r\n+    if not request.user.is_authenticated:\r\n+        return Response({\"error\": \"User is not authenticated\"}, status=403)\r\n \r\n-    def post(self, request):\r\n-        # Check if the user is authenticated\r\n-            # If authenticated, print the username\r\n-        print(f\"Logged-in user: {request.user.username}\")\r\n-        if request.user.is_authenticated:\r\n+    # Extract data from the request\r\n+    venue_id = request.data.get('venue')\r\n+    service_id = request.data.get('service')\r\n+    package_id = request.data.get('package')\r\n \r\n-            # Add to the planner list\r\n-            item_type = request.data.get('item_type')\r\n-            item_id = request.data.get('item_id')\r\n-            \r\n-            planner_item = PlannerList(\r\n-                user=request.user,  # The authenticated user\r\n-                session_id=request.session.session_key,  # For anonymous users, if any\r\n-                item_type=item_type,\r\n-                item_id=item_id\r\n-            )\r\n+    # Ensure at least one item is selected\r\n+    if not any([venue_id, service_id, package_id]):\r\n+        return Response({\"error\": \"At least one item (venue, service, or package) is required.\"}, status=400)\r\n \r\n-            # Save the planner item\r\n-            planner_item.save()\r\n-            return Response({\"message\": \"Item added to planner successfully\"})\r\n-        else:\r\n-            print(\"User is not authenticated\")\r\n-            return Response({\"message\": \"You must be logged in to add items to the planner.\"}, status=403)\r\n+    # Create a PlannerList instance\r\n+    try:\r\n+        planner_item = PlannerList.objects.create(\r\n+            user=request.user,\r\n+            venue=Venue.objects.get(id=venue_id) if venue_id else None,\r\n+            service=Service.objects.get(id=service_id) if service_id else None,\r\n+            package=Package.objects.get(id=package_id) if package_id else None,\r\n+            session_id=request.session.session_key\r\n+        )\r\n+        return Response({\"message\": \"Item added to planner successfully!\"}, status=200)\r\n+    except Venue.DoesNotExist:\r\n+        return Response({\"error\": \"Venue not found\"}, status=404)\r\n+    except Service.DoesNotExist:\r\n+        return Response({\"error\": \"Service not found\"}, status=404)\r\n+    except Package.DoesNotExist:\r\n+        return Response({\"error\": \"Package not found\"}, status=404)\r\n+    except Exception as e:\r\n+        return Response({\"error\": str(e)}, status=500)\r\n"
                },
                {
                    "date": 1731928191140,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -239,9 +239,9 @@\n from rest_framework.permissions import IsAuthenticated\r\n from .models import PlannerList, Venue, Service, Package\r\n \r\n @api_view(['POST'])\r\n-def add_to_planner(request):\r\n+def AddToPlannerView(request):\r\n     if not request.user.is_authenticated:\r\n         return Response({\"error\": \"User is not authenticated\"}, status=403)\r\n \r\n     # Extract data from the request\r\n"
                },
                {
                    "date": 1731928269307,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -233,41 +233,44 @@\n     \r\n     \r\n     \r\n     \r\n-    from rest_framework.decorators import api_view\r\n+    from rest_framework.views import APIView\r\n from rest_framework.response import Response\r\n from rest_framework.permissions import IsAuthenticated\r\n+from rest_framework import status\r\n from .models import PlannerList, Venue, Service, Package\r\n+from .serializers import PlannerListSerializer\r\n \r\n-@api_view(['POST'])\r\n-def AddToPlannerView(request):\r\n-    if not request.user.is_authenticated:\r\n-        return Response({\"error\": \"User is not authenticated\"}, status=403)\r\n+class AddToPlannerView(APIView):\r\n+    permission_classes = [IsAuthenticated]  # Ensure the user is authenticated\r\n \r\n-    # Extract data from the request\r\n-    venue_id = request.data.get('venue')\r\n-    service_id = request.data.get('service')\r\n-    package_id = request.data.get('package')\r\n+    def post(self, request):\r\n+        # Extract data from the request\r\n+        venue_id = request.data.get('venue')\r\n+        service_id = request.data.get('service')\r\n+        package_id = request.data.get('package')\r\n \r\n-    # Ensure at least one item is selected\r\n-    if not any([venue_id, service_id, package_id]):\r\n-        return Response({\"error\": \"At least one item (venue, service, or package) is required.\"}, status=400)\r\n+        # Ensure at least one item is selected\r\n+        if not any([venue_id, service_id, package_id]):\r\n+            return Response({\"error\": \"At least one item (venue, service, or package) is required.\"}, status=status.HTTP_400_BAD_REQUEST)\r\n \r\n-    # Create a PlannerList instance\r\n-    try:\r\n-        planner_item = PlannerList.objects.create(\r\n-            user=request.user,\r\n-            venue=Venue.objects.get(id=venue_id) if venue_id else None,\r\n-            service=Service.objects.get(id=service_id) if service_id else None,\r\n-            package=Package.objects.get(id=package_id) if package_id else None,\r\n-            session_id=request.session.session_key\r\n-        )\r\n-        return Response({\"message\": \"Item added to planner successfully!\"}, status=200)\r\n-    except Venue.DoesNotExist:\r\n-        return Response({\"error\": \"Venue not found\"}, status=404)\r\n-    except Service.DoesNotExist:\r\n-        return Response({\"error\": \"Service not found\"}, status=404)\r\n-    except Package.DoesNotExist:\r\n-        return Response({\"error\": \"Package not found\"}, status=404)\r\n-    except Exception as e:\r\n-        return Response({\"error\": str(e)}, status=500)\r\n+        # Try to create the PlannerList instance\r\n+        try:\r\n+            # Create a PlannerList instance with user and session details\r\n+            planner_item = PlannerList.objects.create(\r\n+                user=request.user,\r\n+                venue=Venue.objects.get(id=venue_id) if venue_id else None,\r\n+                service=Service.objects.get(id=service_id) if service_id else None,\r\n+                package=Package.objects.get(id=package_id) if package_id else None,\r\n+                session_id=request.session.session_key\r\n+            )\r\n+            return Response({\"message\": \"Item added to planner successfully!\"}, status=status.HTTP_200_OK)\r\n+\r\n+        except Venue.DoesNotExist:\r\n+            return Response({\"error\": \"Venue not found\"}, status=status.HTTP_404_NOT_FOUND)\r\n+        except Service.DoesNotExist:\r\n+            return Response({\"error\": \"Service not found\"}, status=status.HTTP_404_NOT_FOUND)\r\n+        except Package.DoesNotExist:\r\n+            return Response({\"error\": \"Package not found\"}, status=status.HTTP_404_NOT_FOUND)\r\n+        except Exception as e:\r\n+            return Response({\"error\": str(e)}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\r\n"
                },
                {
                    "date": 1731928275554,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -238,9 +238,8 @@\n from rest_framework.response import Response\r\n from rest_framework.permissions import IsAuthenticated\r\n from rest_framework import status\r\n from .models import PlannerList, Venue, Service, Package\r\n-from .serializers import PlannerListSerializer\r\n \r\n class AddToPlannerView(APIView):\r\n     permission_classes = [IsAuthenticated]  # Ensure the user is authenticated\r\n \r\n"
                },
                {
                    "date": 1731928534556,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -189,27 +189,27 @@\n \r\n \r\n \r\n \r\n-class PlannerListView(APIView):\r\n-    \"\"\"\r\n-    View to list all planners, including venues, services, and packages.\r\n-    \"\"\"\r\n-    def get(self, request, format=None):\r\n-        # Filter planner list based on logged-in user or session ID\r\n-        user = request.user if request.user.is_authenticated else None\r\n-        session_id = request.GET.get(\"session_id\")\r\n+# class PlannerListView(APIView):\r\n+#     \"\"\"\r\n+#     View to list all planners, including venues, services, and packages.\r\n+#     \"\"\"\r\n+#     def get(self, request, format=None):\r\n+#         # Filter planner list based on logged-in user or session ID\r\n+#         user = request.user if request.user.is_authenticated else None\r\n+#         session_id = request.GET.get(\"session_id\")\r\n \r\n-        if user:\r\n-            planners = PlannerList.objects.filter(user=user)\r\n-        elif session_id:\r\n-            planners = PlannerList.objects.filter(session_id=session_id)\r\n-        else:\r\n-            planners = PlannerList.objects.none()\r\n+#         if user:\r\n+#             planners = PlannerList.objects.filter(user=user)\r\n+#         elif session_id:\r\n+#             planners = PlannerList.objects.filter(session_id=session_id)\r\n+#         else:\r\n+#             planners = PlannerList.objects.none()\r\n \r\n-        # Serialize planner list\r\n-        serializer = PlannerListSerializer(planners, many=True)\r\n-        return Response(serializer.data)\r\n+#         # Serialize planner list\r\n+#         serializer = PlannerListSerializer(planners, many=True)\r\n+#         return Response(serializer.data)\r\n     \r\n     \r\n     \r\n     \r\n@@ -233,9 +233,9 @@\n     \r\n     \r\n     \r\n     \r\n-    from rest_framework.views import APIView\r\n+from rest_framework.views import APIView\r\n from rest_framework.response import Response\r\n from rest_framework.permissions import IsAuthenticated\r\n from rest_framework import status\r\n from .models import PlannerList, Venue, Service, Package\r\n"
                },
                {
                    "date": 1731928551692,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -189,27 +189,27 @@\n \r\n \r\n \r\n \r\n-# class PlannerListView(APIView):\r\n-#     \"\"\"\r\n-#     View to list all planners, including venues, services, and packages.\r\n-#     \"\"\"\r\n-#     def get(self, request, format=None):\r\n-#         # Filter planner list based on logged-in user or session ID\r\n-#         user = request.user if request.user.is_authenticated else None\r\n-#         session_id = request.GET.get(\"session_id\")\r\n+class PlannerListView(APIView):\r\n+    \"\"\"\r\n+    View to list all planners, including venues, services, and packages.\r\n+    \"\"\"\r\n+    def get(self, request, format=None):\r\n+        # Filter planner list based on logged-in user or session ID\r\n+        user = request.user if request.user.is_authenticated else None\r\n+        session_id = request.GET.get(\"session_id\")\r\n \r\n-#         if user:\r\n-#             planners = PlannerList.objects.filter(user=user)\r\n-#         elif session_id:\r\n-#             planners = PlannerList.objects.filter(session_id=session_id)\r\n-#         else:\r\n-#             planners = PlannerList.objects.none()\r\n+        if user:\r\n+            planners = PlannerList.objects.filter(user=user)\r\n+        elif session_id:\r\n+            planners = PlannerList.objects.filter(session_id=session_id)\r\n+        else:\r\n+            planners = PlannerList.objects.none()\r\n \r\n-#         # Serialize planner list\r\n-#         serializer = PlannerListSerializer(planners, many=True)\r\n-#         return Response(serializer.data)\r\n+        # Serialize planner list\r\n+        serializer = PlannerListSerializer(planners, many=True)\r\n+        return Response(serializer.data)\r\n     \r\n     \r\n     \r\n     \r\n"
                },
                {
                    "date": 1731928611559,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,275 +1,51 @@\n-# views.py in your app\r\n-from rest_framework.response import Response\r\n-from rest_framework.decorators import api_view\r\n+import React, { useState } from 'react';\r\n \r\n-from rest_framework.views import APIView\r\n-from rest_framework import generics, status\r\n-from .models import Venue,Service,OurWork,Package,PlannerList\r\n-from .serializer import VenueSerializer, ServiceSerializer ,OurWorkSerializer, PackageSerializer,PlannerListSerializer\r\n-   \r\n-from rest_framework.parsers import MultiPartParser, FormParser\r\n-from rest_framework.permissions import IsAuthenticatedOrReadOnly\r\n-from django.contrib.sessions.models import Session\r\n+const AddToPlannerButton = ({ venueId, serviceId, packageId, authToken }) => {\r\n+  const [error, setError] = useState(null);\r\n+  const [success, setSuccess] = useState(false);\r\n \r\n+  const handleAddToPlanner = async () => {\r\n+    // Prepare data to send in the POST request\r\n+    const data = {\r\n+      venue: venueId,\r\n+      service: serviceId,\r\n+      package: packageId\r\n+    };\r\n \r\n+    // Send POST request to backend\r\n+    try {\r\n+      const response = await fetch('http://127.0.0.1:8000/api/add_to_planner/', {\r\n+        method: 'POST',\r\n+        headers: {\r\n+          'Content-Type': 'application/json',\r\n+          'Authorization': `Token ${authToken}`, // Include the token in headers\r\n+        },\r\n+        body: JSON.stringify(data)\r\n+      });\r\n \r\n-@api_view(['GET'])\r\n-def sample_view(request):\r\n-    data = {\"message\": \"Hello from Django\"}\r\n-    return Response(data)\r\n+      if (response.ok) {\r\n+        setSuccess(true);  // If successful, set success state\r\n+        setError(null);    // Clear any previous error\r\n+      } else {\r\n+        const errorData = await response.json();\r\n+        setSuccess(false);\r\n+        setError(errorData.detail || 'Failed to add item to planner.'); // Set error message\r\n+      }\r\n+    } catch (error) {\r\n+      setSuccess(false);\r\n+      setError('An unexpected error occurred. Please try again.');\r\n+    }\r\n+  };\r\n \r\n+  return (\r\n+    <div>\r\n+      <button onClick={handleAddToPlanner}>\r\n+        Add to Planner\r\n+      </button>\r\n+      {success && <p>Item successfully added to your planner!</p>}\r\n+      {error && <p style={{ color: 'red' }}>{error}</p>}\r\n+    </div>\r\n+  );\r\n+};\r\n \r\n-\r\n-class hello_view(APIView):\r\n-    def get(self,request,Format=None):\r\n-        return Response({\"message\": \"Hello from Django!\"})\r\n-    \r\n-class VenueView(APIView):\r\n-    def get(self, request, format=None):\r\n-        venues = Venue.objects.all()  # Fetch all Venue records\r\n-        serializer = VenueSerializer(venues, many=True)  # Serialize the data\r\n-        return Response(serializer.data)  # Return the data as a JSON response\r\n-    \r\n-class VenueCreateView(APIView):\r\n-    def post(self,request,format=None):\r\n-        serializer = VenueSerializer(data=request.data)\r\n-        if serializer.is_valid():\r\n-            serializer.save()\r\n-            return Response(serializer.data, status=status.HTTP_201_CREATED)\r\n-        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\r\n-    \r\n-    \r\n-    \r\n-class UpdateVenueView(APIView):\r\n-    \r\n-    def get(self, request, venue_id, format=None):\r\n-        try:\r\n-            venue = Venue.objects.get(id=venue_id)\r\n-        except Venue.DoesNotExist:\r\n-            return Response({\"error\": \"Venue not found\"}, status=status.HTTP_404_NOT_FOUND)\r\n-        \r\n-        # Serialize the venue data and return it\r\n-        serializer = VenueSerializer(venue)\r\n-        return Response(serializer.data)\r\n-\r\n-    def put(self, request, venue_id, format=None):\r\n-        try:\r\n-            venue = Venue.objects.get(id=venue_id)\r\n-        except Venue.DoesNotExist:\r\n-            return Response({\"error\": \"Venue not found\"}, status=status.HTTP_404_NOT_FOUND)\r\n-        \r\n-        # Deserialize and update the venue data\r\n-        serializer = VenueSerializer(venue, data=request.data, partial=True)  # partial=True to allow updating only some fields\r\n-        if serializer.is_valid():\r\n-            serializer.save()\r\n-            return Response(serializer.data, status=status.HTTP_200_OK)\r\n-        \r\n-        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\r\n-    \r\n-    \r\n-class ServiceView(APIView):\r\n-    def get(self, request, format=None):\r\n-        services = Service.objects.all()  # Fetch all Venue records\r\n-        serializer = ServiceSerializer(services, many=True)  # Serialize the data\r\n-        return Response(serializer.data)  # Return the data as a JSON response\r\n-    \r\n-class ServiceDetailView(APIView):\r\n-    def get(self,request,id,format=None):\r\n-        try:\r\n-            service=Service.objects.get(id=id)\r\n-            serializer = ServiceSerializer(service)\r\n-            return Response(serializer.data, status=status.HTTP_200_OK)\r\n-        except Service.DoesNotExist:\r\n-            return Response({\"error\": \"Service not found\"}, status=status.HTTP_404_NOT_FOUND)\r\n-        \r\n-class OurWorkListView(APIView):\r\n-    def get(self, request):\r\n-        our_work = OurWork.objects.all()\r\n-        serializer = OurWorkSerializer(our_work, many=True)\r\n-        return Response(serializer.data)\r\n-    \r\n-class PackageView(APIView):\r\n-    def get(self,request,format=None):\r\n-        packages = Package.objects.all()\r\n-        serializer = PackageSerializer(packages, many=True)\r\n-        return Response(serializer.data)\r\n-    \r\n-\r\n-class PackageCreateView(APIView):\r\n-    parser_classes = [MultiPartParser, FormParser]  # To handle file uploads\r\n-\r\n-    def post(self, request, *args, **kwargs):\r\n-        serializer = PackageSerializer(data=request.data)\r\n-        \r\n-        if serializer.is_valid():\r\n-            # Save the package instance\r\n-            package = serializer.save()\r\n-\r\n-            # Add services to the package (ManyToMany field)\r\n-            service_ids = request.data.getlist('services[]')\r\n-            services = Service.objects.filter(id__in=service_ids)\r\n-            package.services.set(services)\r\n-\r\n-            return Response(serializer.data, status=status.HTTP_201_CREATED)\r\n-        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\r\n-    \r\n-\r\n-    def get(self,request,format=None):\r\n-        planners = PlannerList.objects.all()\r\n-        serializer=PlannerListSerializer(planners,many=True)\r\n-        return Response(serializer.data)\r\n-    \r\n-    \r\n-from django.contrib.auth import authenticate, login as auth_login\r\n-from rest_framework.views import APIView\r\n-from rest_framework.response import Response\r\n-from rest_framework import status\r\n-\r\n-class loginView(APIView):\r\n-    def post(self, request):\r\n-        username = request.data.get('username')\r\n-        password = request.data.get('password')\r\n-        user = authenticate(username=username, password=password)\r\n-\r\n-        if user is not None:\r\n-            profile = user.profile  # Assuming you have a one-to-one relationship between User and Profile\r\n-            if profile.is_approved.lower() == 'true':\r\n-                auth_login(request, user)\r\n-                return Response({\"message\": \"Login successful\"}, status=status.HTTP_200_OK)\r\n-            else:\r\n-                return Response({\"message\": \"Your account is not approved yet.\"}, status=status.HTTP_403_FORBIDDEN)\r\n-        else:\r\n-            return Response({\"message\": \"Invalid credentials\"}, status=status.HTTP_400_BAD_REQUEST)\r\n-\r\n-    \r\n-import uuid\r\n-    \r\n-# class AddToPlannerView(APIView):\r\n-#     def post(self, request):\r\n-#         item_type = request.data.get('item_type')\r\n-#         item_id = request.data.get('item_id')\r\n-#         user = request.user if request.user.is_authenticated else None\r\n-#         session_id = request.data.get('session_id', str(uuid.uuid4()))  # Generate a new session ID for anonymous users\r\n-\r\n-#         if not item_type or not item_id:\r\n-#             return Response({\"message\": \"Item type and item ID are required\"}, status=400)\r\n-\r\n-#         item = None\r\n-#         if item_type == 'venue':\r\n-#             item = Venue.objects.filter(id=item_id).first()\r\n-#         elif item_type == 'service':\r\n-#             item = Service.objects.filter(id=item_id).first()\r\n-#         elif item_type == 'package':\r\n-#             item = Package.objects.filter(id=item_id).first()\r\n-#         else:\r\n-#             return Response({\"message\": \"Invalid item type\"}, status=400)\r\n-\r\n-#         if not item:\r\n-#             return Response({\"message\": f\"{item_type.capitalize()} with the given ID not found\"}, status=404)\r\n-\r\n-#         # Create a PlannerList entry\r\n-#         planner_item = PlannerList(\r\n-#             venue=item if isinstance(item, Venue) else None,\r\n-#             service=item if isinstance(item, Service) else None,\r\n-#             package=item if isinstance(item, Package) else None,\r\n-#             user=user,\r\n-#             session_id=session_id\r\n-#         )\r\n-#         planner_item.save()\r\n-\r\n-#         return Response({\"message\": f\"{item_type.capitalize()} added to your planner\"}, status=201)\r\n-\r\n-\r\n-\r\n-# class PlannerListView(APIView):\r\n-#     def get(self,request,format=None):\r\n-#         planners = PlannerList.objects.all()\r\n-#         serializer=PlannerListSerializer(planners,many=True)\r\n-#         return Response(serializer.data)\r\n-\r\n-\r\n-\r\n-\r\n-class PlannerListView(APIView):\r\n-    \"\"\"\r\n-    View to list all planners, including venues, services, and packages.\r\n-    \"\"\"\r\n-    def get(self, request, format=None):\r\n-        # Filter planner list based on logged-in user or session ID\r\n-        user = request.user if request.user.is_authenticated else None\r\n-        session_id = request.GET.get(\"session_id\")\r\n-\r\n-        if user:\r\n-            planners = PlannerList.objects.filter(user=user)\r\n-        elif session_id:\r\n-            planners = PlannerList.objects.filter(session_id=session_id)\r\n-        else:\r\n-            planners = PlannerList.objects.none()\r\n-\r\n-        # Serialize planner list\r\n-        serializer = PlannerListSerializer(planners, many=True)\r\n-        return Response(serializer.data)\r\n-    \r\n-    \r\n-    \r\n-    \r\n-    \r\n-    \r\n-    \r\n-    \r\n-    \r\n-    \r\n-    \r\n-    \r\n-    \r\n-    \r\n-    \r\n-    \r\n-    \r\n-    \r\n-    \r\n-    \r\n-    \r\n-    \r\n-    \r\n-    \r\n-    \r\n-from rest_framework.views import APIView\r\n-from rest_framework.response import Response\r\n-from rest_framework.permissions import IsAuthenticated\r\n-from rest_framework import status\r\n-from .models import PlannerList, Venue, Service, Package\r\n-\r\n-class AddToPlannerView(APIView):\r\n-    permission_classes = [IsAuthenticated]  # Ensure the user is authenticated\r\n-\r\n-    def post(self, request):\r\n-        # Extract data from the request\r\n-        venue_id = request.data.get('venue')\r\n-        service_id = request.data.get('service')\r\n-        package_id = request.data.get('package')\r\n-\r\n-        # Ensure at least one item is selected\r\n-        if not any([venue_id, service_id, package_id]):\r\n-            return Response({\"error\": \"At least one item (venue, service, or package) is required.\"}, status=status.HTTP_400_BAD_REQUEST)\r\n-\r\n-        # Try to create the PlannerList instance\r\n-        try:\r\n-            # Create a PlannerList instance with user and session details\r\n-            planner_item = PlannerList.objects.create(\r\n-                user=request.user,\r\n-                venue=Venue.objects.get(id=venue_id) if venue_id else None,\r\n-                service=Service.objects.get(id=service_id) if service_id else None,\r\n-                package=Package.objects.get(id=package_id) if package_id else None,\r\n-                session_id=request.session.session_key\r\n-            )\r\n-            return Response({\"message\": \"Item added to planner successfully!\"}, status=status.HTTP_200_OK)\r\n-\r\n-        except Venue.DoesNotExist:\r\n-            return Response({\"error\": \"Venue not found\"}, status=status.HTTP_404_NOT_FOUND)\r\n-        except Service.DoesNotExist:\r\n-            return Response({\"error\": \"Service not found\"}, status=status.HTTP_404_NOT_FOUND)\r\n-        except Package.DoesNotExist:\r\n-            return Response({\"error\": \"Package not found\"}, status=status.HTTP_404_NOT_FOUND)\r\n-        except Exception as e:\r\n-            return Response({\"error\": str(e)}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\r\n+export default AddToPlannerButton;\r\n"
                },
                {
                    "date": 1731928619808,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,51 +1,275 @@\n-import React, { useState } from 'react';\r\n+# views.py in your app\r\n+from rest_framework.response import Response\r\n+from rest_framework.decorators import api_view\r\n \r\n-const AddToPlannerButton = ({ venueId, serviceId, packageId, authToken }) => {\r\n-  const [error, setError] = useState(null);\r\n-  const [success, setSuccess] = useState(false);\r\n+from rest_framework.views import APIView\r\n+from rest_framework import generics, status\r\n+from .models import Venue,Service,OurWork,Package,PlannerList\r\n+from .serializer import VenueSerializer, ServiceSerializer ,OurWorkSerializer, PackageSerializer,PlannerListSerializer\r\n+   \r\n+from rest_framework.parsers import MultiPartParser, FormParser\r\n+from rest_framework.permissions import IsAuthenticatedOrReadOnly\r\n+from django.contrib.sessions.models import Session\r\n \r\n-  const handleAddToPlanner = async () => {\r\n-    // Prepare data to send in the POST request\r\n-    const data = {\r\n-      venue: venueId,\r\n-      service: serviceId,\r\n-      package: packageId\r\n-    };\r\n \r\n-    // Send POST request to backend\r\n-    try {\r\n-      const response = await fetch('http://127.0.0.1:8000/api/add_to_planner/', {\r\n-        method: 'POST',\r\n-        headers: {\r\n-          'Content-Type': 'application/json',\r\n-          'Authorization': `Token ${authToken}`, // Include the token in headers\r\n-        },\r\n-        body: JSON.stringify(data)\r\n-      });\r\n \r\n-      if (response.ok) {\r\n-        setSuccess(true);  // If successful, set success state\r\n-        setError(null);    // Clear any previous error\r\n-      } else {\r\n-        const errorData = await response.json();\r\n-        setSuccess(false);\r\n-        setError(errorData.detail || 'Failed to add item to planner.'); // Set error message\r\n-      }\r\n-    } catch (error) {\r\n-      setSuccess(false);\r\n-      setError('An unexpected error occurred. Please try again.');\r\n-    }\r\n-  };\r\n+@api_view(['GET'])\r\n+def sample_view(request):\r\n+    data = {\"message\": \"Hello from Django\"}\r\n+    return Response(data)\r\n \r\n-  return (\r\n-    <div>\r\n-      <button onClick={handleAddToPlanner}>\r\n-        Add to Planner\r\n-      </button>\r\n-      {success && <p>Item successfully added to your planner!</p>}\r\n-      {error && <p style={{ color: 'red' }}>{error}</p>}\r\n-    </div>\r\n-  );\r\n-};\r\n \r\n-export default AddToPlannerButton;\r\n+\r\n+class hello_view(APIView):\r\n+    def get(self,request,Format=None):\r\n+        return Response({\"message\": \"Hello from Django!\"})\r\n+    \r\n+class VenueView(APIView):\r\n+    def get(self, request, format=None):\r\n+        venues = Venue.objects.all()  # Fetch all Venue records\r\n+        serializer = VenueSerializer(venues, many=True)  # Serialize the data\r\n+        return Response(serializer.data)  # Return the data as a JSON response\r\n+    \r\n+class VenueCreateView(APIView):\r\n+    def post(self,request,format=None):\r\n+        serializer = VenueSerializer(data=request.data)\r\n+        if serializer.is_valid():\r\n+            serializer.save()\r\n+            return Response(serializer.data, status=status.HTTP_201_CREATED)\r\n+        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\r\n+    \r\n+    \r\n+    \r\n+class UpdateVenueView(APIView):\r\n+    \r\n+    def get(self, request, venue_id, format=None):\r\n+        try:\r\n+            venue = Venue.objects.get(id=venue_id)\r\n+        except Venue.DoesNotExist:\r\n+            return Response({\"error\": \"Venue not found\"}, status=status.HTTP_404_NOT_FOUND)\r\n+        \r\n+        # Serialize the venue data and return it\r\n+        serializer = VenueSerializer(venue)\r\n+        return Response(serializer.data)\r\n+\r\n+    def put(self, request, venue_id, format=None):\r\n+        try:\r\n+            venue = Venue.objects.get(id=venue_id)\r\n+        except Venue.DoesNotExist:\r\n+            return Response({\"error\": \"Venue not found\"}, status=status.HTTP_404_NOT_FOUND)\r\n+        \r\n+        # Deserialize and update the venue data\r\n+        serializer = VenueSerializer(venue, data=request.data, partial=True)  # partial=True to allow updating only some fields\r\n+        if serializer.is_valid():\r\n+            serializer.save()\r\n+            return Response(serializer.data, status=status.HTTP_200_OK)\r\n+        \r\n+        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\r\n+    \r\n+    \r\n+class ServiceView(APIView):\r\n+    def get(self, request, format=None):\r\n+        services = Service.objects.all()  # Fetch all Venue records\r\n+        serializer = ServiceSerializer(services, many=True)  # Serialize the data\r\n+        return Response(serializer.data)  # Return the data as a JSON response\r\n+    \r\n+class ServiceDetailView(APIView):\r\n+    def get(self,request,id,format=None):\r\n+        try:\r\n+            service=Service.objects.get(id=id)\r\n+            serializer = ServiceSerializer(service)\r\n+            return Response(serializer.data, status=status.HTTP_200_OK)\r\n+        except Service.DoesNotExist:\r\n+            return Response({\"error\": \"Service not found\"}, status=status.HTTP_404_NOT_FOUND)\r\n+        \r\n+class OurWorkListView(APIView):\r\n+    def get(self, request):\r\n+        our_work = OurWork.objects.all()\r\n+        serializer = OurWorkSerializer(our_work, many=True)\r\n+        return Response(serializer.data)\r\n+    \r\n+class PackageView(APIView):\r\n+    def get(self,request,format=None):\r\n+        packages = Package.objects.all()\r\n+        serializer = PackageSerializer(packages, many=True)\r\n+        return Response(serializer.data)\r\n+    \r\n+\r\n+class PackageCreateView(APIView):\r\n+    parser_classes = [MultiPartParser, FormParser]  # To handle file uploads\r\n+\r\n+    def post(self, request, *args, **kwargs):\r\n+        serializer = PackageSerializer(data=request.data)\r\n+        \r\n+        if serializer.is_valid():\r\n+            # Save the package instance\r\n+            package = serializer.save()\r\n+\r\n+            # Add services to the package (ManyToMany field)\r\n+            service_ids = request.data.getlist('services[]')\r\n+            services = Service.objects.filter(id__in=service_ids)\r\n+            package.services.set(services)\r\n+\r\n+            return Response(serializer.data, status=status.HTTP_201_CREATED)\r\n+        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\r\n+    \r\n+\r\n+    def get(self,request,format=None):\r\n+        planners = PlannerList.objects.all()\r\n+        serializer=PlannerListSerializer(planners,many=True)\r\n+        return Response(serializer.data)\r\n+    \r\n+    \r\n+from django.contrib.auth import authenticate, login as auth_login\r\n+from rest_framework.views import APIView\r\n+from rest_framework.response import Response\r\n+from rest_framework import status\r\n+\r\n+class loginView(APIView):\r\n+    def post(self, request):\r\n+        username = request.data.get('username')\r\n+        password = request.data.get('password')\r\n+        user = authenticate(username=username, password=password)\r\n+\r\n+        if user is not None:\r\n+            profile = user.profile  # Assuming you have a one-to-one relationship between User and Profile\r\n+            if profile.is_approved.lower() == 'true':\r\n+                auth_login(request, user)\r\n+                return Response({\"message\": \"Login successful\"}, status=status.HTTP_200_OK)\r\n+            else:\r\n+                return Response({\"message\": \"Your account is not approved yet.\"}, status=status.HTTP_403_FORBIDDEN)\r\n+        else:\r\n+            return Response({\"message\": \"Invalid credentials\"}, status=status.HTTP_400_BAD_REQUEST)\r\n+\r\n+    \r\n+import uuid\r\n+    \r\n+# class AddToPlannerView(APIView):\r\n+#     def post(self, request):\r\n+#         item_type = request.data.get('item_type')\r\n+#         item_id = request.data.get('item_id')\r\n+#         user = request.user if request.user.is_authenticated else None\r\n+#         session_id = request.data.get('session_id', str(uuid.uuid4()))  # Generate a new session ID for anonymous users\r\n+\r\n+#         if not item_type or not item_id:\r\n+#             return Response({\"message\": \"Item type and item ID are required\"}, status=400)\r\n+\r\n+#         item = None\r\n+#         if item_type == 'venue':\r\n+#             item = Venue.objects.filter(id=item_id).first()\r\n+#         elif item_type == 'service':\r\n+#             item = Service.objects.filter(id=item_id).first()\r\n+#         elif item_type == 'package':\r\n+#             item = Package.objects.filter(id=item_id).first()\r\n+#         else:\r\n+#             return Response({\"message\": \"Invalid item type\"}, status=400)\r\n+\r\n+#         if not item:\r\n+#             return Response({\"message\": f\"{item_type.capitalize()} with the given ID not found\"}, status=404)\r\n+\r\n+#         # Create a PlannerList entry\r\n+#         planner_item = PlannerList(\r\n+#             venue=item if isinstance(item, Venue) else None,\r\n+#             service=item if isinstance(item, Service) else None,\r\n+#             package=item if isinstance(item, Package) else None,\r\n+#             user=user,\r\n+#             session_id=session_id\r\n+#         )\r\n+#         planner_item.save()\r\n+\r\n+#         return Response({\"message\": f\"{item_type.capitalize()} added to your planner\"}, status=201)\r\n+\r\n+\r\n+\r\n+# class PlannerListView(APIView):\r\n+#     def get(self,request,format=None):\r\n+#         planners = PlannerList.objects.all()\r\n+#         serializer=PlannerListSerializer(planners,many=True)\r\n+#         return Response(serializer.data)\r\n+\r\n+\r\n+\r\n+\r\n+class PlannerListView(APIView):\r\n+    \"\"\"\r\n+    View to list all planners, including venues, services, and packages.\r\n+    \"\"\"\r\n+    def get(self, request, format=None):\r\n+        # Filter planner list based on logged-in user or session ID\r\n+        user = request.user if request.user.is_authenticated else None\r\n+        session_id = request.GET.get(\"session_id\")\r\n+\r\n+        if user:\r\n+            planners = PlannerList.objects.filter(user=user)\r\n+        elif session_id:\r\n+            planners = PlannerList.objects.filter(session_id=session_id)\r\n+        else:\r\n+            planners = PlannerList.objects.none()\r\n+\r\n+        # Serialize planner list\r\n+        serializer = PlannerListSerializer(planners, many=True)\r\n+        return Response(serializer.data)\r\n+    \r\n+    \r\n+    \r\n+    \r\n+    \r\n+    \r\n+    \r\n+    \r\n+    \r\n+    \r\n+    \r\n+    \r\n+    \r\n+    \r\n+    \r\n+    \r\n+    \r\n+    \r\n+    \r\n+    \r\n+    \r\n+    \r\n+    \r\n+    \r\n+    \r\n+from rest_framework.views import APIView\r\n+from rest_framework.response import Response\r\n+from rest_framework.permissions import IsAuthenticated\r\n+from rest_framework import status\r\n+from .models import PlannerList, Venue, Service, Package\r\n+\r\n+class AddToPlannerView(APIView):\r\n+    permission_classes = [IsAuthenticated]  # Ensure the user is authenticated\r\n+\r\n+    def post(self, request):\r\n+        # Extract data from the request\r\n+        venue_id = request.data.get('venue')\r\n+        service_id = request.data.get('service')\r\n+        package_id = request.data.get('package')\r\n+\r\n+        # Ensure at least one item is selected\r\n+        if not any([venue_id, service_id, package_id]):\r\n+            return Response({\"error\": \"At least one item (venue, service, or package) is required.\"}, status=status.HTTP_400_BAD_REQUEST)\r\n+\r\n+        # Try to create the PlannerList instance\r\n+        try:\r\n+            # Create a PlannerList instance with user and session details\r\n+            planner_item = PlannerList.objects.create(\r\n+                user=request.user,\r\n+                venue=Venue.objects.get(id=venue_id) if venue_id else None,\r\n+                service=Service.objects.get(id=service_id) if service_id else None,\r\n+                package=Package.objects.get(id=package_id) if package_id else None,\r\n+                session_id=request.session.session_key\r\n+            )\r\n+            return Response({\"message\": \"Item added to planner successfully!\"}, status=status.HTTP_200_OK)\r\n+\r\n+        except Venue.DoesNotExist:\r\n+            return Response({\"error\": \"Venue not found\"}, status=status.HTTP_404_NOT_FOUND)\r\n+        except Service.DoesNotExist:\r\n+            return Response({\"error\": \"Service not found\"}, status=status.HTTP_404_NOT_FOUND)\r\n+        except Package.DoesNotExist:\r\n+            return Response({\"error\": \"Package not found\"}, status=status.HTTP_404_NOT_FOUND)\r\n+        except Exception as e:\r\n+            return Response({\"error\": str(e)}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\r\n"
                },
                {
                    "date": 1731928735501,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -238,10 +238,12 @@\n from rest_framework.response import Response\r\n from rest_framework.permissions import IsAuthenticated\r\n from rest_framework import status\r\n from .models import PlannerList, Venue, Service, Package\r\n+from rest_framework.authentication import TokenAuthentication\r\n \r\n class AddToPlannerView(APIView):\r\n+    authentication_classes = [TokenAuthentication]\r\n     permission_classes = [IsAuthenticated]  # Ensure the user is authenticated\r\n \r\n     def post(self, request):\r\n         # Extract data from the request\r\n"
                },
                {
                    "date": 1731928850013,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -238,12 +238,12 @@\n from rest_framework.response import Response\r\n from rest_framework.permissions import IsAuthenticated\r\n from rest_framework import status\r\n from .models import PlannerList, Venue, Service, Package\r\n-from rest_framework.authentication import TokenAuthentication\r\n+from rest_framework_simplejwt.authentication import JWTAuthentication\r\n \r\n class AddToPlannerView(APIView):\r\n-    authentication_classes = [TokenAuthentication]\r\n+    authentication_classes = [JWTAuthentication]\r\n     permission_classes = [IsAuthenticated]  # Ensure the user is authenticated\r\n \r\n     def post(self, request):\r\n         # Extract data from the request\r\n"
                },
                {
                    "date": 1731929271878,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -242,9 +242,9 @@\n from rest_framework_simplejwt.authentication import JWTAuthentication\r\n \r\n class AddToPlannerView(APIView):\r\n     authentication_classes = [JWTAuthentication]\r\n-    permission_classes = [IsAuthenticated]  # Ensure the user is authenticated\r\n+    permission_classes = [IsAuthenticated]\r\n \r\n     def post(self, request):\r\n         # Extract data from the request\r\n         venue_id = request.data.get('venue')\r\n"
                },
                {
                    "date": 1731929279301,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -241,9 +241,9 @@\n from .models import PlannerList, Venue, Service, Package\r\n from rest_framework_simplejwt.authentication import JWTAuthentication\r\n \r\n class AddToPlannerView(APIView):\r\n-    authentication_classes = [JWTAuthentication]\r\n+    # authentication_classes = [JWTAuthentication]\r\n     permission_classes = [IsAuthenticated]\r\n \r\n     def post(self, request):\r\n         # Extract data from the request\r\n"
                },
                {
                    "date": 1731929294355,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -242,9 +242,9 @@\n from rest_framework_simplejwt.authentication import JWTAuthentication\r\n \r\n class AddToPlannerView(APIView):\r\n     # authentication_classes = [JWTAuthentication]\r\n-    permission_classes = [IsAuthenticated]\r\n+    # permission_classes = [IsAuthenticated]\r\n \r\n     def post(self, request):\r\n         # Extract data from the request\r\n         venue_id = request.data.get('venue')\r\n"
                },
                {
                    "date": 1731929333106,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -243,8 +243,9 @@\n \r\n class AddToPlannerView(APIView):\r\n     # authentication_classes = [JWTAuthentication]\r\n     # permission_classes = [IsAuthenticated]\r\n+    print(\"IsAuthenticated\":IsAuthenticated)\r\n \r\n     def post(self, request):\r\n         # Extract data from the request\r\n         venue_id = request.data.get('venue')\r\n"
                },
                {
                    "date": 1731929340692,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -243,9 +243,9 @@\n \r\n class AddToPlannerView(APIView):\r\n     # authentication_classes = [JWTAuthentication]\r\n     # permission_classes = [IsAuthenticated]\r\n-    print(\"IsAuthenticated\":IsAuthenticated)\r\n+    print(\"IsAuthenticated: \"IsAuthenticated)\r\n \r\n     def post(self, request):\r\n         # Extract data from the request\r\n         venue_id = request.data.get('venue')\r\n"
                },
                {
                    "date": 1731929348208,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -243,9 +243,9 @@\n \r\n class AddToPlannerView(APIView):\r\n     # authentication_classes = [JWTAuthentication]\r\n     # permission_classes = [IsAuthenticated]\r\n-    print(\"IsAuthenticated: \"IsAuthenticated)\r\n+    print(\"IsAuthenticated: \",IsAuthenticated)\r\n \r\n     def post(self, request):\r\n         # Extract data from the request\r\n         venue_id = request.data.get('venue')\r\n"
                },
                {
                    "date": 1731929642925,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -236,16 +236,17 @@\n     \r\n from rest_framework.views import APIView\r\n from rest_framework.response import Response\r\n from rest_framework.permissions import IsAuthenticated\r\n+from rest_framework import generics, permissions \r\n from rest_framework import status\r\n from .models import PlannerList, Venue, Service, Package\r\n from rest_framework_simplejwt.authentication import JWTAuthentication\r\n \r\n class AddToPlannerView(APIView):\r\n     # authentication_classes = [JWTAuthentication]\r\n     # permission_classes = [IsAuthenticated]\r\n-    print(\"IsAuthenticated: \",IsAuthenticated)\r\n+    print(\"IsAuthenticated: \",permissions.IsAuthenticate)\r\n \r\n     def post(self, request):\r\n         # Extract data from the request\r\n         venue_id = request.data.get('venue')\r\n"
                },
                {
                    "date": 1731929657535,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -236,17 +236,15 @@\n     \r\n from rest_framework.views import APIView\r\n from rest_framework.response import Response\r\n from rest_framework.permissions import IsAuthenticated\r\n-from rest_framework import generics, permissions \r\n from rest_framework import status\r\n from .models import PlannerList, Venue, Service, Package\r\n from rest_framework_simplejwt.authentication import JWTAuthentication\r\n \r\n class AddToPlannerView(APIView):\r\n     # authentication_classes = [JWTAuthentication]\r\n     # permission_classes = [IsAuthenticated]\r\n-    print(\"IsAuthenticated: \",permissions.IsAuthenticate)\r\n \r\n     def post(self, request):\r\n         # Extract data from the request\r\n         venue_id = request.data.get('venue')\r\n"
                },
                {
                    "date": 1731929685588,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -241,11 +241,9 @@\n from .models import PlannerList, Venue, Service, Package\r\n from rest_framework_simplejwt.authentication import JWTAuthentication\r\n \r\n class AddToPlannerView(APIView):\r\n-    # authentication_classes = [JWTAuthentication]\r\n-    # permission_classes = [IsAuthenticated]\r\n-\r\n+  \r\n     def post(self, request):\r\n         # Extract data from the request\r\n         venue_id = request.data.get('venue')\r\n         service_id = request.data.get('service')\r\n"
                },
                {
                    "date": 1731929702698,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -241,9 +241,11 @@\n from .models import PlannerList, Venue, Service, Package\r\n from rest_framework_simplejwt.authentication import JWTAuthentication\r\n \r\n class AddToPlannerView(APIView):\r\n-  \r\n+    # authentication_classes = [JWTAuthentication]\r\n+    # permission_classes = [IsAuthenticated]\r\n+\r\n     def post(self, request):\r\n         # Extract data from the request\r\n         venue_id = request.data.get('venue')\r\n         service_id = request.data.get('service')\r\n"
                },
                {
                    "date": 1731929753541,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -240,9 +240,9 @@\n from rest_framework import status\r\n from .models import PlannerList, Venue, Service, Package\r\n from rest_framework_simplejwt.authentication import JWTAuthentication\r\n \r\n-class AddToPlannerView(APIView):\r\n+class AddToPlannerView(generics.ListCreateAPIView):\r\n     # authentication_classes = [JWTAuthentication]\r\n     # permission_classes = [IsAuthenticated]\r\n \r\n     def post(self, request):\r\n"
                },
                {
                    "date": 1731929774267,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -240,9 +240,9 @@\n from rest_framework import status\r\n from .models import PlannerList, Venue, Service, Package\r\n from rest_framework_simplejwt.authentication import JWTAuthentication\r\n \r\n-class AddToPlannerView(generics.ListCreateAPIView):\r\n+class AddToPlannerView(APIView):\r\n     # authentication_classes = [JWTAuthentication]\r\n     # permission_classes = [IsAuthenticated]\r\n \r\n     def post(self, request):\r\n"
                },
                {
                    "date": 1731929823840,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -240,38 +240,63 @@\n from rest_framework import status\r\n from .models import PlannerList, Venue, Service, Package\r\n from rest_framework_simplejwt.authentication import JWTAuthentication\r\n \r\n-class AddToPlannerView(APIView):\r\n-    # authentication_classes = [JWTAuthentication]\r\n-    # permission_classes = [IsAuthenticated]\r\n+# class AddToPlannerView(APIView):\r\n+#     authentication_classes = [JWTAuthentication]\r\n+#     permission_classes = [IsAuthenticated]\r\n \r\n-    def post(self, request):\r\n-        # Extract data from the request\r\n-        venue_id = request.data.get('venue')\r\n-        service_id = request.data.get('service')\r\n-        package_id = request.data.get('package')\r\n+#     def post(self, request):\r\n+#         # Extract data from the request\r\n+#         venue_id = request.data.get('venue')\r\n+#         service_id = request.data.get('service')\r\n+#         package_id = request.data.get('package')\r\n \r\n-        # Ensure at least one item is selected\r\n-        if not any([venue_id, service_id, package_id]):\r\n-            return Response({\"error\": \"At least one item (venue, service, or package) is required.\"}, status=status.HTTP_400_BAD_REQUEST)\r\n+#         # Ensure at least one item is selected\r\n+#         if not any([venue_id, service_id, package_id]):\r\n+#             return Response({\"error\": \"At least one item (venue, service, or package) is required.\"}, status=status.HTTP_400_BAD_REQUEST)\r\n \r\n-        # Try to create the PlannerList instance\r\n-        try:\r\n-            # Create a PlannerList instance with user and session details\r\n-            planner_item = PlannerList.objects.create(\r\n-                user=request.user,\r\n-                venue=Venue.objects.get(id=venue_id) if venue_id else None,\r\n-                service=Service.objects.get(id=service_id) if service_id else None,\r\n-                package=Package.objects.get(id=package_id) if package_id else None,\r\n-                session_id=request.session.session_key\r\n-            )\r\n-            return Response({\"message\": \"Item added to planner successfully!\"}, status=status.HTTP_200_OK)\r\n+#         # Try to create the PlannerList instance\r\n+#         try:\r\n+#             # Create a PlannerList instance with user and session details\r\n+#             planner_item = PlannerList.objects.create(\r\n+#                 user=request.user,\r\n+#                 venue=Venue.objects.get(id=venue_id) if venue_id else None,\r\n+#                 service=Service.objects.get(id=service_id) if service_id else None,\r\n+#                 package=Package.objects.get(id=package_id) if package_id else None,\r\n+#                 session_id=request.session.session_key\r\n+#             )\r\n+#             return Response({\"message\": \"Item added to planner successfully!\"}, status=status.HTTP_200_OK)\r\n \r\n-        except Venue.DoesNotExist:\r\n-            return Response({\"error\": \"Venue not found\"}, status=status.HTTP_404_NOT_FOUND)\r\n-        except Service.DoesNotExist:\r\n-            return Response({\"error\": \"Service not found\"}, status=status.HTTP_404_NOT_FOUND)\r\n-        except Package.DoesNotExist:\r\n-            return Response({\"error\": \"Package not found\"}, status=status.HTTP_404_NOT_FOUND)\r\n-        except Exception as e:\r\n-            return Response({\"error\": str(e)}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\r\n+#         except Venue.DoesNotExist:\r\n+#             return Response({\"error\": \"Venue not found\"}, status=status.HTTP_404_NOT_FOUND)\r\n+#         except Service.DoesNotExist:\r\n+#             return Response({\"error\": \"Service not found\"}, status=status.HTTP_404_NOT_FOUND)\r\n+#         except Package.DoesNotExist:\r\n+#             return Response({\"error\": \"Package not found\"}, status=status.HTTP_404_NOT_FOUND)\r\n+#         except Exception as e:\r\n+#             return Response({\"error\": str(e)}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+class AddToPlannerView(generics.ListCreateAPIView):\r\n+    queryset = PlannerList.objects.all()\r\n+    serializer_class = PlannerListSerializer\r\n+    permission_classes = [permissions.IsAuthenticated]  # Ensure that only authenticated users can access\r\n+\r\n+    def perform_create(self, serializer):\r\n+        # Override perform_create to add user automatically if authenticated\r\n+        user = self.request.user  # Get the authenticated user\r\n+        serializer.save(user=user)  # Save the planner list with the user\r\n+        \r\n+    def list(self, request, *args, **kwargs):\r\n+        # Optionally override the list method if you want to customize how the items are returned\r\n+        # By default, this will return all PlannerList items\r\n+        return super().list(request, *args, **kwargs)\r\n+\r\n+    def create(self, request, *args, **kwargs):\r\n+        # Override create method to handle POST requests for adding to the planner\r\n+        return super().create(request, *args, **kwargs)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731929840167,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -279,10 +279,10 @@\n \r\n \r\n \r\n \r\n+from rest_framework import generics, permissions\r\n \r\n-\r\n class AddToPlannerView(generics.ListCreateAPIView):\r\n     queryset = PlannerList.objects.all()\r\n     serializer_class = PlannerListSerializer\r\n     permission_classes = [permissions.IsAuthenticated]  # Ensure that only authenticated users can access\r\n"
                },
                {
                    "date": 1731929884599,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -240,63 +240,38 @@\n from rest_framework import status\r\n from .models import PlannerList, Venue, Service, Package\r\n from rest_framework_simplejwt.authentication import JWTAuthentication\r\n \r\n-# class AddToPlannerView(APIView):\r\n-#     authentication_classes = [JWTAuthentication]\r\n-#     permission_classes = [IsAuthenticated]\r\n+class AddToPlannerView(APIView):\r\n+    authentication_classes = [JWTAuthentication]\r\n+    permission_classes = [IsAuthenticated]\r\n \r\n-#     def post(self, request):\r\n-#         # Extract data from the request\r\n-#         venue_id = request.data.get('venue')\r\n-#         service_id = request.data.get('service')\r\n-#         package_id = request.data.get('package')\r\n+    def post(self, request):\r\n+        # Extract data from the request\r\n+        venue_id = request.data.get('venue')\r\n+        service_id = request.data.get('service')\r\n+        package_id = request.data.get('package')\r\n \r\n-#         # Ensure at least one item is selected\r\n-#         if not any([venue_id, service_id, package_id]):\r\n-#             return Response({\"error\": \"At least one item (venue, service, or package) is required.\"}, status=status.HTTP_400_BAD_REQUEST)\r\n+        # Ensure at least one item is selected\r\n+        if not any([venue_id, service_id, package_id]):\r\n+            return Response({\"error\": \"At least one item (venue, service, or package) is required.\"}, status=status.HTTP_400_BAD_REQUEST)\r\n \r\n-#         # Try to create the PlannerList instance\r\n-#         try:\r\n-#             # Create a PlannerList instance with user and session details\r\n-#             planner_item = PlannerList.objects.create(\r\n-#                 user=request.user,\r\n-#                 venue=Venue.objects.get(id=venue_id) if venue_id else None,\r\n-#                 service=Service.objects.get(id=service_id) if service_id else None,\r\n-#                 package=Package.objects.get(id=package_id) if package_id else None,\r\n-#                 session_id=request.session.session_key\r\n-#             )\r\n-#             return Response({\"message\": \"Item added to planner successfully!\"}, status=status.HTTP_200_OK)\r\n+        # Try to create the PlannerList instance\r\n+        try:\r\n+            # Create a PlannerList instance with user and session details\r\n+            planner_item = PlannerList.objects.create(\r\n+                user=request.user,\r\n+                venue=Venue.objects.get(id=venue_id) if venue_id else None,\r\n+                service=Service.objects.get(id=service_id) if service_id else None,\r\n+                package=Package.objects.get(id=package_id) if package_id else None,\r\n+                session_id=request.session.session_key\r\n+            )\r\n+            return Response({\"message\": \"Item added to planner successfully!\"}, status=status.HTTP_200_OK)\r\n \r\n-#         except Venue.DoesNotExist:\r\n-#             return Response({\"error\": \"Venue not found\"}, status=status.HTTP_404_NOT_FOUND)\r\n-#         except Service.DoesNotExist:\r\n-#             return Response({\"error\": \"Service not found\"}, status=status.HTTP_404_NOT_FOUND)\r\n-#         except Package.DoesNotExist:\r\n-#             return Response({\"error\": \"Package not found\"}, status=status.HTTP_404_NOT_FOUND)\r\n-#         except Exception as e:\r\n-#             return Response({\"error\": str(e)}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\r\n-\r\n-\r\n-\r\n\\ No newline at end of file\n-\r\n-\r\n-from rest_framework import generics, permissions\r\n-\r\n-class AddToPlannerView(generics.ListCreateAPIView):\r\n-    queryset = PlannerList.objects.all()\r\n-    serializer_class = PlannerListSerializer\r\n-    permission_classes = [permissions.IsAuthenticated]  # Ensure that only authenticated users can access\r\n-\r\n-    def perform_create(self, serializer):\r\n-        # Override perform_create to add user automatically if authenticated\r\n-        user = self.request.user  # Get the authenticated user\r\n-        serializer.save(user=user)  # Save the planner list with the user\r\n-        \r\n-    def list(self, request, *args, **kwargs):\r\n-        # Optionally override the list method if you want to customize how the items are returned\r\n-        # By default, this will return all PlannerList items\r\n-        return super().list(request, *args, **kwargs)\r\n-\r\n-    def create(self, request, *args, **kwargs):\r\n-        # Override create method to handle POST requests for adding to the planner\r\n-        return super().create(request, *args, **kwargs)\n+        except Venue.DoesNotExist:\r\n+            return Response({\"error\": \"Venue not found\"}, status=status.HTTP_404_NOT_FOUND)\r\n+        except Service.DoesNotExist:\r\n+            return Response({\"error\": \"Service not found\"}, status=status.HTTP_404_NOT_FOUND)\r\n+        except Package.DoesNotExist:\r\n+            return Response({\"error\": \"Package not found\"}, status=status.HTTP_404_NOT_FOUND)\r\n+        except Exception as e:\r\n+            return Response({\"error\": str(e)}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\r\n"
                },
                {
                    "date": 1731929938982,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -234,44 +234,39 @@\n     \r\n     \r\n     \r\n from rest_framework.views import APIView\r\n+from rest_framework.permissions import AllowAny\r\n from rest_framework.response import Response\r\n-from rest_framework.permissions import IsAuthenticated\r\n from rest_framework import status\r\n from .models import PlannerList, Venue, Service, Package\r\n-from rest_framework_simplejwt.authentication import JWTAuthentication\r\n+from .serializers import PlannerListSerializer\r\n \r\n class AddToPlannerView(APIView):\r\n-    authentication_classes = [JWTAuthentication]\r\n-    permission_classes = [IsAuthenticated]\r\n+    permission_classes = [AllowAny]  # Allow any user (authenticated or not)\r\n \r\n     def post(self, request):\r\n         # Extract data from the request\r\n-        venue_id = request.data.get('venue')\r\n-        service_id = request.data.get('service')\r\n-        package_id = request.data.get('package')\r\n-\r\n-        # Ensure at least one item is selected\r\n-        if not any([venue_id, service_id, package_id]):\r\n-            return Response({\"error\": \"At least one item (venue, service, or package) is required.\"}, status=status.HTTP_400_BAD_REQUEST)\r\n-\r\n-        # Try to create the PlannerList instance\r\n+        package_id = request.data.get(\"package\")\r\n+        venue_id = request.data.get(\"venue\")\r\n+        service_id = request.data.get(\"service\")\r\n+        \r\n+        # Retrieve the corresponding objects\r\n         try:\r\n-            # Create a PlannerList instance with user and session details\r\n-            planner_item = PlannerList.objects.create(\r\n-                user=request.user,\r\n-                venue=Venue.objects.get(id=venue_id) if venue_id else None,\r\n-                service=Service.objects.get(id=service_id) if service_id else None,\r\n-                package=Package.objects.get(id=package_id) if package_id else None,\r\n-                session_id=request.session.session_key\r\n-            )\r\n-            return Response({\"message\": \"Item added to planner successfully!\"}, status=status.HTTP_200_OK)\r\n+            package = Package.objects.get(id=package_id)\r\n+            venue = Venue.objects.get(id=venue_id)\r\n+            service = Service.objects.get(id=service_id)\r\n+        except (Package.DoesNotExist, Venue.DoesNotExist, Service.DoesNotExist):\r\n+            return Response({\"error\": \"Invalid package, venue, or service\"}, status=status.HTTP_400_BAD_REQUEST)\r\n+        \r\n+        # Create a new PlannerList entry\r\n+        planner_item = PlannerList.objects.create(\r\n+            package=package,\r\n+            venue=venue,\r\n+            service=service,\r\n+            booked_at=request.data.get(\"booked_at\"),\r\n+            user=None  # You can set this to None for unauthenticated users, or set to `request.user` if they are logged in\r\n+        )\r\n \r\n-        except Venue.DoesNotExist:\r\n-            return Response({\"error\": \"Venue not found\"}, status=status.HTTP_404_NOT_FOUND)\r\n-        except Service.DoesNotExist:\r\n-            return Response({\"error\": \"Service not found\"}, status=status.HTTP_404_NOT_FOUND)\r\n-        except Package.DoesNotExist:\r\n-            return Response({\"error\": \"Package not found\"}, status=status.HTTP_404_NOT_FOUND)\r\n-        except Exception as e:\r\n-            return Response({\"error\": str(e)}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\r\n+        # Serialize and return the response\r\n+        serializer = PlannerListSerializer(planner_item)\r\n+        return Response(serializer.data, status=status.HTTP_201_CREATED)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731929946112,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -238,10 +238,8 @@\n from rest_framework.permissions import AllowAny\r\n from rest_framework.response import Response\r\n from rest_framework import status\r\n from .models import PlannerList, Venue, Service, Package\r\n-from .serializers import PlannerListSerializer\r\n-\r\n class AddToPlannerView(APIView):\r\n     permission_classes = [AllowAny]  # Allow any user (authenticated or not)\r\n \r\n     def post(self, request):\r\n"
                },
                {
                    "date": 1731930101643,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -266,5 +266,19 @@\n         )\r\n \r\n         # Serialize and return the response\r\n         serializer = PlannerListSerializer(planner_item)\r\n-        return Response(serializer.data, status=status.HTTP_201_CREATED)\n\\ No newline at end of file\n+        return Response(serializer.data, status=status.HTTP_201_CREATED)\r\n+    \r\n+    \r\n+    \r\n+class YourModelCreateView(APIView):\r\n+    def post(self, request, *args, **kwargs):\r\n+        serializer = PackageSerializer(data=request.data)\r\n+        \r\n+        # Check if the data is valid\r\n+        if serializer.is_valid():\r\n+            # Save the new instance\r\n+            serializer.save()\r\n+            return Response(serializer.data, status=status.HTTP_201_CREATED)\r\n+        \r\n+        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731930437908,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -269,16 +269,4 @@\n         serializer = PlannerListSerializer(planner_item)\r\n         return Response(serializer.data, status=status.HTTP_201_CREATED)\r\n     \r\n     \r\n-    \r\n-class YourModelCreateView(APIView):\r\n-    def post(self, request, *args, **kwargs):\r\n-        serializer = PackageSerializer(data=request.data)\r\n-        \r\n-        # Check if the data is valid\r\n-        if serializer.is_valid():\r\n-            # Save the new instance\r\n-            serializer.save()\r\n-            return Response(serializer.data, status=status.HTTP_201_CREATED)\r\n-        \r\n-        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731930974201,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -236,37 +236,32 @@\n     \r\n from rest_framework.views import APIView\r\n from rest_framework.permissions import AllowAny\r\n from rest_framework.response import Response\r\n-from rest_framework import status\r\n-from .models import PlannerList, Venue, Service, Package\r\n+\r\n class AddToPlannerView(APIView):\r\n-    permission_classes = [AllowAny]  # Allow any user (authenticated or not)\r\n+    permission_classes = [AllowAny]\r\n \r\n     def post(self, request):\r\n-        # Extract data from the request\r\n         package_id = request.data.get(\"package\")\r\n         venue_id = request.data.get(\"venue\")\r\n         service_id = request.data.get(\"service\")\r\n-        \r\n-        # Retrieve the corresponding objects\r\n+\r\n+        print(\"Received data:\", package_id, venue_id, service_id)  # Debugging line\r\n+\r\n         try:\r\n             package = Package.objects.get(id=package_id)\r\n             venue = Venue.objects.get(id=venue_id)\r\n             service = Service.objects.get(id=service_id)\r\n         except (Package.DoesNotExist, Venue.DoesNotExist, Service.DoesNotExist):\r\n             return Response({\"error\": \"Invalid package, venue, or service\"}, status=status.HTTP_400_BAD_REQUEST)\r\n-        \r\n-        # Create a new PlannerList entry\r\n+\r\n         planner_item = PlannerList.objects.create(\r\n             package=package,\r\n             venue=venue,\r\n             service=service,\r\n             booked_at=request.data.get(\"booked_at\"),\r\n-            user=None  # You can set this to None for unauthenticated users, or set to `request.user` if they are logged in\r\n+            user=None  # Set this according to user authentication\r\n         )\r\n \r\n-        # Serialize and return the response\r\n         serializer = PlannerListSerializer(planner_item)\r\n         return Response(serializer.data, status=status.HTTP_201_CREATED)\r\n-    \r\n-    \r\n"
                },
                {
                    "date": 1731936408053,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -247,21 +247,39 @@\n         service_id = request.data.get(\"service\")\r\n \r\n         print(\"Received data:\", package_id, venue_id, service_id)  # Debugging line\r\n \r\n+        # We expect only one of these fields to be present\r\n+        if not (package_id or venue_id or service_id):\r\n+            return Response({\"error\": \"At least one of package, venue, or service must be provided\"}, status=status.HTTP_400_BAD_REQUEST)\r\n+\r\n         try:\r\n-            package = Package.objects.get(id=package_id)\r\n-            venue = Venue.objects.get(id=venue_id)\r\n-            service = Service.objects.get(id=service_id)\r\n-        except (Package.DoesNotExist, Venue.DoesNotExist, Service.DoesNotExist):\r\n-            return Response({\"error\": \"Invalid package, venue, or service\"}, status=status.HTTP_400_BAD_REQUEST)\r\n+            if package_id:\r\n+                package = Package.objects.get(id=package_id)\r\n+            else:\r\n+                package = None\r\n \r\n+            if venue_id:\r\n+                venue = Venue.objects.get(id=venue_id)\r\n+            else:\r\n+                venue = None\r\n+\r\n+            if service_id:\r\n+                service = Service.objects.get(id=service_id)\r\n+            else:\r\n+                service = None\r\n+\r\n+        except (Package.DoesNotExist, Venue.DoesNotExist, Service.DoesNotExist) as e:\r\n+            return Response({\"error\": str(e)}, status=status.HTTP_400_BAD_REQUEST)\r\n+\r\n+        # Create the planner item based on available data\r\n         planner_item = PlannerList.objects.create(\r\n             package=package,\r\n             venue=venue,\r\n             service=service,\r\n             booked_at=request.data.get(\"booked_at\"),\r\n-            user=None  # Set this according to user authentication\r\n+            user=None  # Set this according to user authentication, if necessary\r\n         )\r\n \r\n         serializer = PlannerListSerializer(planner_item)\r\n         return Response(serializer.data, status=status.HTTP_201_CREATED)\r\n+\r\n"
                },
                {
                    "date": 1731936679974,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -244,34 +244,27 @@\n     def post(self, request):\r\n         package_id = request.data.get(\"package\")\r\n         venue_id = request.data.get(\"venue\")\r\n         service_id = request.data.get(\"service\")\r\n+        booked_at = request.data.get(\"booked_at\")\r\n \r\n         print(\"Received data:\", package_id, venue_id, service_id)  # Debugging line\r\n \r\n         # We expect only one of these fields to be present\r\n         if not (package_id or venue_id or service_id):\r\n             return Response({\"error\": \"At least one of package, venue, or service must be provided\"}, status=status.HTTP_400_BAD_REQUEST)\r\n \r\n         try:\r\n-            if package_id:\r\n-                package = Package.objects.get(id=package_id)\r\n-            else:\r\n-                package = None\r\n-\r\n-            if venue_id:\r\n-                venue = Venue.objects.get(id=venue_id)\r\n-            else:\r\n-                venue = None\r\n-\r\n-            if service_id:\r\n-                service = Service.objects.get(id=service_id)\r\n-            else:\r\n-                service = None\r\n-\r\n+            package = Package.objects.get(id=package_id) if package_id else None\r\n+            venue = Venue.objects.get(id=venue_id) if venue_id else None\r\n+            service = Service.objects.get(id=service_id) if service_id else None\r\n         except (Package.DoesNotExist, Venue.DoesNotExist, Service.DoesNotExist) as e:\r\n             return Response({\"error\": str(e)}, status=status.HTTP_400_BAD_REQUEST)\r\n \r\n+        # Retrieve user information if authenticated, else use session_id for anonymous user\r\n+        user = request.user if request.user.is_authenticated else None\r\n+        session_id = request.data.get('session_id') if not user else None\r\n+\r\n         # Create the planner item based on available data\r\n         planner_item = PlannerList.objects.create(\r\n             package=package,\r\n             venue=venue,\r\n"
                },
                {
                    "date": 1731936693088,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -268,10 +268,11 @@\n         planner_item = PlannerList.objects.create(\r\n             package=package,\r\n             venue=venue,\r\n             service=service,\r\n-            booked_at=request.data.get(\"booked_at\"),\r\n-            user=None  # Set this according to user authentication, if necessary\r\n+            booked_at=booked_at,\r\n+            user=user,\r\n+            session_id=session_id\r\n         )\r\n \r\n         serializer = PlannerListSerializer(planner_item)\r\n         return Response(serializer.data, status=status.HTTP_201_CREATED)\r\n"
                }
            ],
            "date": 1731427175663,
            "name": "Commit-0",
            "content": "# views.py in your app\r\nfrom rest_framework.response import Response\r\nfrom rest_framework.decorators import api_view\r\n\r\nfrom rest_framework.views import APIView\r\nfrom rest_framework import generics, status\r\nfrom .models import Venue,Service,OurWork,Package\r\nfrom .serializer import VenueSerializer, ServiceSerializer ,OurWorkSerializer, PackageSerializer\r\n\r\n\r\n@api_view(['GET'])\r\ndef sample_view(request):\r\n    data = {\"message\": \"Hello from Django\"}\r\n    return Response(data)\r\n\r\n\r\n\r\nclass hello_view(APIView):\r\n    def get(self,request,Format=None):\r\n        return Response({\"message\": \"Hello from Django!\"})\r\n    \r\nclass VenueView(APIView):\r\n    def get(self, request, format=None):\r\n        venues = Venue.objects.all()  # Fetch all Venue records\r\n        serializer = VenueSerializer(venues, many=True)  # Serialize the data\r\n        return Response(serializer.data)  # Return the data as a JSON response\r\n    \r\nclass VenueCreateView(APIView):\r\n    def post(self,request,format=None):\r\n        serializer = VenueSerializer(data=request.data)\r\n        if serializer.is_valid():\r\n            serializer.save()\r\n            return Response(serializer.data, status=status.HTTP_201_CREATED)\r\n        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\r\n    \r\n    \r\n    \r\nclass UpdateVenueView(APIView):\r\n    \r\n    def get(self, request, venue_id, format=None):\r\n        try:\r\n            venue = Venue.objects.get(id=venue_id)\r\n        except Venue.DoesNotExist:\r\n            return Response({\"error\": \"Venue not found\"}, status=status.HTTP_404_NOT_FOUND)\r\n        \r\n        # Serialize the venue data and return it\r\n        serializer = VenueSerializer(venue)\r\n        return Response(serializer.data)\r\n\r\n    def put(self, request, venue_id, format=None):\r\n        try:\r\n            venue = Venue.objects.get(id=venue_id)\r\n        except Venue.DoesNotExist:\r\n            return Response({\"error\": \"Venue not found\"}, status=status.HTTP_404_NOT_FOUND)\r\n        \r\n        # Deserialize and update the venue data\r\n        serializer = VenueSerializer(venue, data=request.data, partial=True)  # partial=True to allow updating only some fields\r\n        if serializer.is_valid():\r\n            serializer.save()\r\n            return Response(serializer.data, status=status.HTTP_200_OK)\r\n        \r\n        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\r\n    \r\n    \r\nclass ServiceView(APIView):\r\n    def get(self, request, format=None):\r\n        services = Service.objects.all()  # Fetch all Venue records\r\n        serializer = ServiceSerializer(services, many=True)  # Serialize the data\r\n        return Response(serializer.data)  # Return the data as a JSON response\r\n    \r\nclass ServiceDetailView(APIView):\r\n    def get(self,request,id,format=None):\r\n        try:\r\n            service=Service.objects.get(id=id)\r\n            serializer = ServiceSerializer(service)\r\n            return Response(serializer.data, status=status.HTTP_200_OK)\r\n        except Service.DoesNotExist:\r\n            return Response({\"error\": \"Service not found\"}, status=status.HTTP_404_NOT_FOUND)\r\n        \r\nclass OurWorkListView(APIView):\r\n    def get(self, request):\r\n        our_work = OurWork.objects.all()\r\n        serializer = OurWorkSerializer(our_work, many=True)\r\n        return Response(serializer.data)\r\n    \r\nclass PackageView(APIView):\r\n    def get(self,request,format=None):\r\n        packages = Package.objects.all()\r\n        serializer = PackageSerializer(packages, many=True)\r\n        return Response(serializer.data)\r\n    \r\n    pass"
        }
    ]
}