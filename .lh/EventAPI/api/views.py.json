{
    "sourceFile": "EventAPI/api/views.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1731427175663,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1731427194774,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -88,5 +88,4 @@\n         packages = Package.objects.all()\r\n         serializer = PackageSerializer(packages, many=True)\r\n         return Response(serializer.data)\r\n     \r\n-    pass\n\\ No newline at end of file\n"
                }
            ],
            "date": 1731427175663,
            "name": "Commit-0",
            "content": "# views.py in your app\r\nfrom rest_framework.response import Response\r\nfrom rest_framework.decorators import api_view\r\n\r\nfrom rest_framework.views import APIView\r\nfrom rest_framework import generics, status\r\nfrom .models import Venue,Service,OurWork,Package\r\nfrom .serializer import VenueSerializer, ServiceSerializer ,OurWorkSerializer, PackageSerializer\r\n\r\n\r\n@api_view(['GET'])\r\ndef sample_view(request):\r\n    data = {\"message\": \"Hello from Django\"}\r\n    return Response(data)\r\n\r\n\r\n\r\nclass hello_view(APIView):\r\n    def get(self,request,Format=None):\r\n        return Response({\"message\": \"Hello from Django!\"})\r\n    \r\nclass VenueView(APIView):\r\n    def get(self, request, format=None):\r\n        venues = Venue.objects.all()  # Fetch all Venue records\r\n        serializer = VenueSerializer(venues, many=True)  # Serialize the data\r\n        return Response(serializer.data)  # Return the data as a JSON response\r\n    \r\nclass VenueCreateView(APIView):\r\n    def post(self,request,format=None):\r\n        serializer = VenueSerializer(data=request.data)\r\n        if serializer.is_valid():\r\n            serializer.save()\r\n            return Response(serializer.data, status=status.HTTP_201_CREATED)\r\n        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\r\n    \r\n    \r\n    \r\nclass UpdateVenueView(APIView):\r\n    \r\n    def get(self, request, venue_id, format=None):\r\n        try:\r\n            venue = Venue.objects.get(id=venue_id)\r\n        except Venue.DoesNotExist:\r\n            return Response({\"error\": \"Venue not found\"}, status=status.HTTP_404_NOT_FOUND)\r\n        \r\n        # Serialize the venue data and return it\r\n        serializer = VenueSerializer(venue)\r\n        return Response(serializer.data)\r\n\r\n    def put(self, request, venue_id, format=None):\r\n        try:\r\n            venue = Venue.objects.get(id=venue_id)\r\n        except Venue.DoesNotExist:\r\n            return Response({\"error\": \"Venue not found\"}, status=status.HTTP_404_NOT_FOUND)\r\n        \r\n        # Deserialize and update the venue data\r\n        serializer = VenueSerializer(venue, data=request.data, partial=True)  # partial=True to allow updating only some fields\r\n        if serializer.is_valid():\r\n            serializer.save()\r\n            return Response(serializer.data, status=status.HTTP_200_OK)\r\n        \r\n        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\r\n    \r\n    \r\nclass ServiceView(APIView):\r\n    def get(self, request, format=None):\r\n        services = Service.objects.all()  # Fetch all Venue records\r\n        serializer = ServiceSerializer(services, many=True)  # Serialize the data\r\n        return Response(serializer.data)  # Return the data as a JSON response\r\n    \r\nclass ServiceDetailView(APIView):\r\n    def get(self,request,id,format=None):\r\n        try:\r\n            service=Service.objects.get(id=id)\r\n            serializer = ServiceSerializer(service)\r\n            return Response(serializer.data, status=status.HTTP_200_OK)\r\n        except Service.DoesNotExist:\r\n            return Response({\"error\": \"Service not found\"}, status=status.HTTP_404_NOT_FOUND)\r\n        \r\nclass OurWorkListView(APIView):\r\n    def get(self, request):\r\n        our_work = OurWork.objects.all()\r\n        serializer = OurWorkSerializer(our_work, many=True)\r\n        return Response(serializer.data)\r\n    \r\nclass PackageView(APIView):\r\n    def get(self,request,format=None):\r\n        packages = Package.objects.all()\r\n        serializer = PackageSerializer(packages, many=True)\r\n        return Response(serializer.data)\r\n    \r\n    pass"
        }
    ]
}